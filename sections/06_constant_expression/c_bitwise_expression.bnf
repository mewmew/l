// --- [ Bitwise expressions ] -------------------------------------------------

// https://llvm.org/docs/LangRef.html#constant-expressions

// ~~~ [ shl ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

ShlExpr
	: "shl" OverflowFlags "(" Type Constant "," Type Constant ")"
	<< &ast.ShlExpr{OverflowFlags: $1.([]ast.OverflowFlag), X: astx.TypeConst($3, $4), Y: astx.TypeConst($6, $7)}, nil >>
;

// ~~~ [ lshr ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

LShrExpr
	: "lshr" OptExact "(" Type Constant "," Type Constant ")"
	<< &ast.LShrExpr{Exact: $1.(bool), X: astx.TypeConst($3, $4), Y: astx.TypeConst($6, $7)}, nil >>
;

// ~~~ [ ashr ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

AShrExpr
	: "ashr" OptExact "(" Type Constant "," Type Constant ")"
	<< &ast.AShrExpr{Exact: $1.(bool), X: astx.TypeConst($3, $4), Y: astx.TypeConst($6, $7)}, nil >>
;

// ~~~ [ and ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

AndExpr
	: "and" "(" Type Constant "," Type Constant ")"
	<< &ast.AndExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

// ~~~ [ or ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

OrExpr
	: "or" "(" Type Constant "," Type Constant ")"
	<< &ast.OrExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

// ~~~ [ xor ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

XorExpr
	: "xor" "(" Type Constant "," Type Constant ")"
	<< &ast.XorExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

