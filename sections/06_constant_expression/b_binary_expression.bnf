// --- [ Binary expressions ] --------------------------------------------------

// https://llvm.org/docs/LangRef.html#constant-expressions

// ~~~ [ add ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

AddExpr
	: "add" OverflowFlags "(" Type Constant "," Type Constant ")"
	<< &ast.AddExpr{OverflowFlags: $1.([]ast.OverflowFlag), X: astx.TypeConst($3, $4), Y: astx.TypeConst($6, $7)}, nil >>
;

// ~~~ [ fadd ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

FAddExpr
	: "fadd" "(" Type Constant "," Type Constant ")"
	<< &ast.FAddExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

// ~~~ [ sub ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

SubExpr
	: "sub" OverflowFlags "(" Type Constant "," Type Constant ")"
	<< &ast.SubExpr{OverflowFlags: $1.([]ast.OverflowFlag), X: astx.TypeConst($3, $4), Y: astx.TypeConst($6, $7)}, nil >>
;

// ~~~ [ fsub ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

FSubExpr
	: "fsub" "(" Type Constant "," Type Constant ")"
	<< &ast.FSubExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

// ~~~ [ mul ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

MulExpr
	: "mul" OverflowFlags "(" Type Constant "," Type Constant ")"
	<< &ast.MulExpr{OverflowFlags: $1.([]ast.OverflowFlag), X: astx.TypeConst($3, $4), Y: astx.TypeConst($6, $7)}, nil >>
;

// ~~~ [ fmul ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

FMulExpr
	: "fmul" "(" Type Constant "," Type Constant ")"
	<< &ast.FMulExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

// ~~~ [ udiv ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

UDivExpr
	: "udiv" OptExact "(" Type Constant "," Type Constant ")"
	<< &ast.UDivExpr{Exact: $1.(bool), X: astx.TypeConst($3, $4), Y: astx.TypeConst($6, $7)}, nil >>
;

// ~~~ [ sdiv ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

SDivExpr
	: "sdiv" OptExact "(" Type Constant "," Type Constant ")"
	<< &ast.SDivExpr{Exact: $1.(bool), X: astx.TypeConst($3, $4), Y: astx.TypeConst($6, $7)}, nil >>
;

// ~~~ [ fdiv ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

FDivExpr
	: "fdiv" "(" Type Constant "," Type Constant ")"
	<< &ast.FDivExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

// ~~~ [ urem ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

URemExpr
	: "urem" "(" Type Constant "," Type Constant ")"
	<< &ast.URemExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

// ~~~ [ srem ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

SRemExpr
	: "srem" "(" Type Constant "," Type Constant ")"
	<< &ast.SRemExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

// ~~~ [ frem ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

FRemExpr
	: "frem" "(" Type Constant "," Type Constant ")"
	<< &ast.FRemExpr{X: astx.TypeConst($2, $3), Y: astx.TypeConst($5, $6)}, nil >>
;

