/*
/// ParseGlobalObjectMetadataAttachment
///   ::= !dbg !57
bool LLParser::ParseGlobalObjectMetadataAttachment(GlobalObject &GO) {
*/

/*
/// ParseMetadataAttachment
///   ::= !dbg !42
bool LLParser::ParseMetadataAttachment(unsigned &Kind, MDNode *&MD) {
*/

MetadataAttachments
	: empty
	| MetadataAttachmentList
;

MetadataAttachmentList
	: MetadataAttachment
	| MetadataAttachmentList MetadataAttachment
;

MetadataAttachment
	: MetadataName MDNode
;

/*
/// MDNode:
///  ::= !{ ... }
///  ::= !7
///  ::= !DILocation(...)
bool LLParser::ParseMDNode(MDNode *&N) {
*/

MDNode
	: SpecializedMDNode
	// !{ ... }
	| MDTuple
	// !42
	| MetadataID
;

/*
bool LLParser::ParseSpecializedMDNode(MDNode *&N, bool IsDistinct) {
*/

SpecializedMDNode
	: DILocation
	| GenericDINode
	| DISubrange
	| DIEnumerator
	| DIBasicType
	| DIDerivedType
	| DICompositeType
	| DISubroutineType
	| DIFile
	| DICompileUnit
;

/*
/// ParseDILocationFields:
///   ::= !DILocation(line: 43, column: 8, scope: !5, inlinedAt: !6)
bool LLParser::ParseDILocation(MDNode *&Result, bool IsDistinct) {

  OPTIONAL(line, LineField, );
  OPTIONAL(column, ColumnField, );
  REQUIRED(scope, MDField, (AllowNull false));
  OPTIONAL(inlinedAt, MDField, );
*/

DILocation
	: "!DILocation" "(" DILocationFields ")"
;

DILocationFields
	: empty
	| DILocationFieldList
;

DILocationFieldList
	: DILocationField
	| DILocationFieldList "," DILocationField
;

DILocationField
	: LineField
	| "column:" int_lit
	| ScopeField
	| "inlinedAt:" MDField
;

LineField
	: "line:" int_lit
;

ScopeField
	: "scope:" MetadataID // underlying Metadata
;

MDField
	: MetadataID
	| "null"
;

/*
/// ParseGenericDINode:
///   ::= !GenericDINode(tag: 15, header: "...", operands: {...})
bool LLParser::ParseGenericDINode(MDNode *&Result, bool IsDistinct) {

  REQUIRED(tag, DwarfTagField, );
  OPTIONAL(header, MDStringField, );
  OPTIONAL(operands, MDFieldList, );
*/

GenericDINode
	: "!GenericDINode" "(" GenericDINodeFields ")"
;

GenericDINodeFields
	: empty
	| GenericDINodeFieldList
;

GenericDINodeFieldList
	: GenericDINodeField
	| GenericDINodeFieldList "," GenericDINodeField
;

GenericDINodeField
	: TagField
	| "header:" string_lit
	| "operands:" Metadatas
;

TagField
	: "tag:" DwarfTag
;

DwarfTag
	: int_lit
	// DW_TAG_foo
	| dwarf_tag
;

/*
/// ParseDISubrange:
///   ::= !DISubrange(count: 30, lowerBound: 2)
///   ::= !DISubrange(count: !node, lowerBound: 2)
bool LLParser::ParseDISubrange(MDNode *&Result, bool IsDistinct) {

  REQUIRED(count, MDSignedOrMDField, (-1, -1, INT64_MAX, false));
  OPTIONAL(lowerBound, MDSignedField, );
*/

DISubrange
	: "!DISubrange" "(" DISubrangeFields ")"
;

DISubrangeFields
	: empty
	| DISubrangeFieldList
;

DISubrangeFieldList
	: DISubrangeField
	| DISubrangeFieldList "," DISubrangeField
;

DISubrangeField
	: "count:" IntLitOrMDField
	| "lowerBound:" int_lit
;

/*
struct MDSignedOrMDField : MDEitherFieldImpl<MDSignedField, MDField> {
*/

IntLitOrMDField
	: int_lit
	| MDField
;

/*
/// ParseDIEnumerator:
///   ::= !DIEnumerator(value: 30, isUnsigned: true, name: "SomeKind")
bool LLParser::ParseDIEnumerator(MDNode *&Result, bool IsDistinct) {

  REQUIRED(name, MDStringField, );
  REQUIRED(value, MDSignedOrUnsignedField, );
  OPTIONAL(isUnsigned, MDBoolField, (false));
*/

DIEnumerator
	: "!DIEnumerator" "(" DIEnumeratorFields ")"
;

DIEnumeratorFields
	: empty
	| DIEnumeratorFieldList
;

DIEnumeratorFieldList
	: DIEnumeratorField
	| DIEnumeratorFieldList "," DIEnumeratorField
;

DIEnumeratorField
	: NameField
	| "value:" int_lit
	| "isUnsigned:" BoolConst
;

NameField
	: "name:" string_lit
;

/*
/// ParseDIBasicType:
///   ::= !DIBasicType(tag: DW_TAG_base_type, name: "int", size: 32, align: 32)
bool LLParser::ParseDIBasicType(MDNode *&Result, bool IsDistinct) {

  OPTIONAL(tag, DwarfTagField, (dwarf::DW_TAG_base_type));
  OPTIONAL(name, MDStringField, );
  OPTIONAL(size, MDUnsignedField, (0, UINT64_MAX));
  OPTIONAL(align, MDUnsignedField, (0, UINT32_MAX));
  OPTIONAL(encoding, DwarfAttEncodingField, );
*/

DIBasicType
	: "!DIBasicType" "(" DIBasicTypeFields ")"
;

DIBasicTypeFields
	: empty
	| DIBasicTypeFieldList
;

DIBasicTypeFieldList
	: DIBasicTypeField
	| DIBasicTypeFieldList "," DIBasicTypeField
;

DIBasicTypeField
	: TagField
	| NameField
	| SizeField
	| AlignField
	| "encoding:" DwarfAttEncoding
;

SizeField
	: "size:" int_lit
;

AlignField
	: "align:" int_lit
;

/*
bool LLParser::ParseMDField(LocTy Loc, StringRef Name,
                            DwarfAttEncodingField &Result) {
*/

DwarfAttEncoding
	: int_lit
	// DW_ATE_foo
	| dwarf_att_encoding
;

/*
/// ParseDIDerivedType:
///   ::= !DIDerivedType(tag: DW_TAG_pointer_type, name: "int", file: !0,
///                      line: 7, scope: !1, baseType: !2, size: 32,
///                      align: 32, offset: 0, flags: 0, extraData: !3,
///                      dwarfAddressSpace: 3)
bool LLParser::ParseDIDerivedType(MDNode *&Result, bool IsDistinct) {

  REQUIRED(tag, DwarfTagField, );
  OPTIONAL(name, MDStringField, );
  OPTIONAL(file, MDField, );
  OPTIONAL(line, LineField, );
  OPTIONAL(scope, MDField, );
  REQUIRED(baseType, MDField, );
  OPTIONAL(size, MDUnsignedField, (0, UINT64_MAX));
  OPTIONAL(align, MDUnsignedField, (0, UINT32_MAX));
  OPTIONAL(offset, MDUnsignedField, (0, UINT64_MAX));
  OPTIONAL(flags, DIFlagField, );
  OPTIONAL(extraData, MDField, );
  OPTIONAL(dwarfAddressSpace, MDUnsignedField, (UINT32_MAX, UINT32_MAX));
*/

DIDerivedType
	: "!DIDerivedType" "(" DIDerivedTypeFields ")"
;

DIDerivedTypeFields
	: empty
	| DIDerivedTypeFieldList
;

DIDerivedTypeFieldList
	: DIDerivedTypeField
	| DIDerivedTypeFieldList "," DIDerivedTypeField
;

DIDerivedTypeField
	: TagField
	| NameField
	| FileField
	| LineField
	| ScopeField
	| BaseTypeField
	| SizeField
	| AlignField
	| OffsetField
	| FlagsField
	| "extraData:" MDField
	| "dwarfAddressSpace:" int_lit
;

FileField
	: "file:" MDField
;

BaseTypeField
	: "baseType:" MDField
;

OffsetField
	: "offset:" int_lit
;

FlagsField
	: "flags:" DIFlagList
;

/*
/// DIFlagField
///  ::= uint32
///  ::= DIFlagVector
///  ::= DIFlagVector '|' DIFlagFwdDecl '|' uint32 '|' DIFlagPublic
template <>
bool LLParser::ParseMDField(LocTy Loc, StringRef Name, DIFlagField &Result) {
*/

DIFlagList
	: DIFlag
	| DIFlagList "|" DIFlag
;

DIFlag
	: int_lit
	// DIFlagFoo
	| di_flag
;

/*
bool LLParser::ParseDICompositeType(MDNode *&Result, bool IsDistinct) {
  REQUIRED(tag, DwarfTagField, );
  OPTIONAL(name, MDStringField, );
  OPTIONAL(file, MDField, );
  OPTIONAL(line, LineField, );
  OPTIONAL(scope, MDField, );
  OPTIONAL(baseType, MDField, );
  OPTIONAL(size, MDUnsignedField, (0, UINT64_MAX));
  OPTIONAL(align, MDUnsignedField, (0, UINT32_MAX));
  OPTIONAL(offset, MDUnsignedField, (0, UINT64_MAX));
  OPTIONAL(flags, DIFlagField, );
  OPTIONAL(elements, MDField, );
  OPTIONAL(runtimeLang, DwarfLangField, );
  OPTIONAL(vtableHolder, MDField, );
  OPTIONAL(templateParams, MDField, );
  OPTIONAL(identifier, MDStringField, );
  OPTIONAL(discriminator, MDField, );
*/

DICompositeType
	: "!DICompositeType" "(" DICompositeTypeFields ")"
;

DICompositeTypeFields
	: empty
	| DICompositeTypeFieldList
;

DICompositeTypeFieldList
	: DICompositeTypeField
	| DICompositeTypeFieldList "," DICompositeTypeField
;

DICompositeTypeField
	: TagField
	| NameField
	| FileField
	| LineField
	| ScopeField
	| BaseTypeField
	| SizeField
	| AlignField
	| OffsetField
	| FlagsField
	| "elements:" MDField
	| "runtimeLang:" DwarfLang
	| "vtableHolder:" MDField
	| "templateParams:" MDField
	| "templateParams:" MDField
	| "identifier:" string_lit
	| "discriminator:" MDField
;

/*
template <>
bool LLParser::ParseMDField(LocTy Loc, StringRef Name, DwarfLangField &Result) {
*/

DwarfLang
	: int_lit
	// DW_LANG_foo
	| dwarf_lang
;

/*
bool LLParser::ParseDISubroutineType(MDNode *&Result, bool IsDistinct) {

  OPTIONAL(flags, DIFlagField, );
  OPTIONAL(cc, DwarfCCField, );
  REQUIRED(types, MDField, );
*/

DISubroutineType
	: "!DISubroutineType" "(" DISubroutineTypeFields ")"
;

DISubroutineTypeFields
	: empty
	| DISubroutineTypeFieldList
;

DISubroutineTypeFieldList
	: DISubroutineTypeField
	| DISubroutineTypeFieldList "," DISubroutineTypeField
;

DISubroutineTypeField
	: FlagsField
	| "cc:" DwarfCC
	| "types:" MDField
;

/*
template <>
bool LLParser::ParseMDField(LocTy Loc, StringRef Name, DwarfCCField &Result) {
*/

DwarfCC
	: int_lit
	// DW_CC_foo
	| dwarf_cc
;

/*
/// ParseDIFileType:
///   ::= !DIFileType(filename: "path/to/file", directory: "/path/to/dir"
///                   checksumkind: CSK_MD5,
///                   checksum: "000102030405060708090a0b0c0d0e0f")
bool LLParser::ParseDIFile(MDNode *&Result, bool IsDistinct) {

  REQUIRED(filename, MDStringField, );
  REQUIRED(directory, MDStringField, );
  OPTIONAL(checksumkind, ChecksumKindField, (DIFile::CSK_MD5));
  OPTIONAL(checksum, MDStringField, );
*/

DIFile
	: "!DIFile" "(" DIFileFields ")"
;

DIFileFields
	: empty
	| DIFileFieldList
;

DIFileFieldList
	: DIFileField
	| DIFileFieldList "," DIFileField
;

DIFileField
	: "filename:" string_lit
	| "directory:" string_lit
	| "checksumkind:" ChecksumKind
	| "checksum:" string_lit
;

ChecksumKind
	// CSK_foo
	: checksum_kind
;

/*
/// ParseDICompileUnit:
///   ::= !DICompileUnit(language: DW_LANG_C99, file: !0, producer: "clang",
///                      isOptimized: true, flags: "-O2", runtimeVersion: 1,
///                      splitDebugFilename: "abc.debug",
///                      emissionKind: FullDebug, enums: !1, retainedTypes: !2,
///                      globals: !4, imports: !5, macros: !6, dwoId: 0x0abcd)
bool LLParser::ParseDICompileUnit(MDNode *&Result, bool IsDistinct) {

  REQUIRED(language, DwarfLangField, );
  REQUIRED(file, MDField, (AllowNull false));
  OPTIONAL(producer, MDStringField, );
  OPTIONAL(isOptimized, MDBoolField, );
  OPTIONAL(flags, MDStringField, );
  OPTIONAL(runtimeVersion, MDUnsignedField, (0, UINT32_MAX));
  OPTIONAL(splitDebugFilename, MDStringField, );
  OPTIONAL(emissionKind, EmissionKindField, );
  OPTIONAL(enums, MDField, );
  OPTIONAL(retainedTypes, MDField, );
  OPTIONAL(globals, MDField, );
  OPTIONAL(imports, MDField, );
  OPTIONAL(macros, MDField, );
  OPTIONAL(dwoId, MDUnsignedField, );
  OPTIONAL(splitDebugInlining, MDBoolField, = true);
  OPTIONAL(debugInfoForProfiling, MDBoolField, = false);
  OPTIONAL(gnuPubnames, MDBoolField, = false);
*/

DICompileUnit
	: "!DICompileUnit" "(" DICompileUnitFields ")"
;

DICompileUnitFields
	: empty
	| DICompileUnitFieldList
;

DICompileUnitFieldList
	: DICompileUnitField
	| DICompileUnitFieldList "," DICompileUnitField
;

DICompileUnitField
	: "language:" DwarfLang
	| FileField
	| "producer:" string_lit
	| "isOptimized:" BoolConst
	| "flags:" string_lit
	| "runtimeVersion:" int_lit
	| "splitDebugFilename:" string_lit
	| "emissionKind:" EmissionKind
	| "enums:" MDField
	| "retainedTypes:" MDField
	| "globals:" MDField
	| "imports:" MDField
	| "macros:" MDField
	| "dwoId:" int_lit
	| "splitDebugInlining:" BoolConst
	| "debugInfoForProfiling:" BoolConst
	| "gnuPubnames:" BoolConst
;

EmissionKind
	: int_lit
	| "NoDebug"
	| "FullDebug"
	| "LineTablesOnly"
;

/*
bool LLParser::ParseMDTuple(MDNode *&MD, bool IsDistinct) {
*/

MDTuple
	: "!" "{" Metadatas "}"
;

//===----------------------------------------------------------------------===//
// Embedded metadata.
//===----------------------------------------------------------------------===//

/*
/// ParseMDNodeVector
///   ::= { Element (',' Element)* }
/// Element
///   ::= 'null' | TypeAndValue
bool LLParser::ParseMDNodeVector(SmallVectorImpl<Metadata *> &Elts) {
*/

Metadatas
	: "null"
	| Metadata
;

MetadataList
	: Metadata
	| MetadataList "," Metadata
;

/*
/// ParseMetadata
///  ::= i32 %local
///  ::= i32 @global
///  ::= i32 7
///  ::= !42
///  ::= !{...}
///  ::= !"string"
///  ::= !DILocation(...)
bool LLParser::ParseMetadata(Metadata *&MD, PerFunctionState *PFS) {
*/

Metadata
	: SpecializedMDNode
	| Type Value
	| MDString
	// !{ ... }
	| MDTuple
	// !7
	| MetadataID
;

MDString
	: "!" string_lit
;

