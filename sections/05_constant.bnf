// === [ Constants ] ===========================================================

// https://llvm.org/docs/LangRef.html#constants

// ref: ParseValID

Constant
	: BoolConst
	| IntConst
	| FloatConst
	| NullConst
	| NoneConst
	| StructConst
	| ArrayConst
	| CharArrayConst
	| VectorConst
	| ZeroInitializerConst
	// @42
	// @foo
	| GlobalIdent
	| UndefConst
	| BlockAddressConst
	| ConstantExpr
;

// --- [ Boolean Constants ] ---------------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

BoolConst
	: "true"    << ast.BoolConst(true), nil >>
	| "false"   << ast.BoolConst(false), nil >>
;

// --- [ Integer Constants ] ---------------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

IntConst
	: int_lit   << astx.NewIntConst($0) >>
;

// --- [ Floating-point Constants ] --------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

FloatConst
	: float_lit   << astx.NewFloatConst($0) >>
;

// --- [ Null Pointer Constants ] ----------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

NullConst
	: "null"   << &ast.NullConst{}, nil >>
;

// --- [ Token Constants ] -----------------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

NoneConst
	: "none"   << &ast.NoneConst{}, nil >>
;

// --- [ Structure Constants ] -------------------------------------------------

// https://llvm.org/docs/LangRef.html#complex-constants

// ref: ParseValID
//
//  ::= '{' ConstVector '}'
//  ::= '<' '{' ConstVector '}' '>' --> Packed Struct.

// TODO: Simplify when parser generator is not limited by 1 token lookahead.
//
//    StructConst
//       : "{" Elems "}"
//       | "<" "{" Elems "}" ">"
//    ;

StructConst
	: "{" "}"                         << astx.StructConst(([]*ast.TypeConst)(nil), false) >>
	| "{" TypeConstList "}"           << astx.StructConst($1, false) >>
	| "<" "{" "}" ">"                 << astx.StructConst(([]*ast.TypeConst)(nil), true) >>
	| "<" "{" TypeConstList "}" ">"   << astx.StructConst($2, true) >>
;

// --- [ Array Constants ] -----------------------------------------------------

// https://llvm.org/docs/LangRef.html#complex-constants

// ref: ParseValID
//
//  c "foo"

ArrayConst
	: "[" TypeConsts "]"   << astx.NewArrayConst($1) >>
;

CharArrayConst
	: "c" string_lit   << astx.NewCharArrayConst($1) >>
;

// --- [ Vector Constants ] ----------------------------------------------------

// https://llvm.org/docs/LangRef.html#complex-constants

// ref: ParseValID
//
//  ::= '<' ConstVector '>'         --> Vector.

VectorConst
	: "<" TypeConsts ">"   << astx.NewVectorConst($1) >>
;

// --- [ Zero Initialization Constants ] ---------------------------------------

// https://llvm.org/docs/LangRef.html#complex-constants

// ref: ParseValID

ZeroInitializerConst
	: "zeroinitializer"   << &ast.ZeroInitializerConst{}, nil >>
;

// --- [ Undefined Values ] ----------------------------------------------------

// https://llvm.org/docs/LangRef.html#undefined-values

// ref: ParseValID

UndefConst
	: "undef"   << &ast.UndefConst{}, nil >>
;

// --- [ Addresses of Basic Blocks ] -------------------------------------------

// https://llvm.org/docs/LangRef.html#addresses-of-basic-blocks

// ref: ParseValID
//
//  ::= 'blockaddress' '(' @foo ',' %bar ')'

BlockAddressConst
	: "blockaddress" "(" GlobalIdent "," LocalIdent ")"   << astx.NewBlockAddressConst($2, $4) >>
;

