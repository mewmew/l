//===----------------------------------------------------------------------===//
// Constants.
//===----------------------------------------------------------------------===//

/*
/// ParseValID - Parse an abstract value that doesn't necessarily have a
/// type implied.  For example, if we parse "4" we don't know what integer type
/// it has.  The value will later be combined with its type and checked for
/// sanity.  PFS is used to convert function-local operands of metadata (since
/// metadata operands are not just parsed here but also converted to values).
/// PFS can be null when we are not parsing metadata values inside a function.
bool LLParser::ParseValID(ValID &ID, PerFunctionState *PFS) {
*/

Constant
	// @42
	// @foo
	: GlobalIdent
	| IntConst
	| FloatConst
	| BoolConst
	| NullConst
	| UndefConst
	| ZeroInitializerConst
	| NoneConst
	// ValID ::= '{' ConstVector '}'
	// ValID ::= '<' '{' ConstVector '}' '>' --> Packed Struct.
	| StructConst
	| ArrayConst
	// c "foo"
	| CharArrayConst
	// ValID ::= '<' ConstVector '>'         --> Vector.
	| VectorConst
	// ValID ::= 'blockaddress' '(' @foo ',' %bar ')'
	| BlockAddressConst
	| ConstantExpr
;

IntConst
	: int_lit
;

FloatConst
	: float_lit
;

BoolConst
	: "true"
	| "false"
;

NullConst
	: "null"
;

UndefConst
	: "undef"
;

ZeroInitializerConst
	: "zeroinitializer"
;

NoneConst
	: "none"
;

StructConst
	: "{" Elems "}"
	| "<" "{" Elems "}" ">"
;

ArrayConst
	: "[" Elems "]"
;

CharArrayConst
	: "c" string_lit
;

VectorConst
	: "<" Elems ">"
;

// --- [ Addresses of Basic Blocks ] -------------------------------------------

// https://llvm.org/docs/LangRef.html#addresses-of-basic-blocks

BlockAddressConst
	: "blockaddress" "(" GlobalIdent "," LocalIdent ")"
;

