// ~~~ [ Global Variable Declaration ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#global-variables

// ref: ParseUnnamedGlobal
//
//   OptionalVisibility (ALIAS | IFUNC) ...
//   OptionalLinkage OptionalPreemptionSpecifier OptionalVisibility
//   OptionalDLLStorageClass
//                                                     ...   -> global variable
//   GlobalID '=' OptionalVisibility (ALIAS | IFUNC) ...
//   GlobalID '=' OptionalLinkage OptionalPreemptionSpecifier OptionalVisibility
//                OptionalDLLStorageClass
//                                                     ...   -> global variable

// ref: ParseNamedGlobal
//
//   GlobalVar '=' OptionalVisibility (ALIAS | IFUNC) ...
//   GlobalVar '=' OptionalLinkage OptionalPreemptionSpecifier
//                 OptionalVisibility OptionalDLLStorageClass
//                                                     ...   -> global variable

// ref: ParseGlobal
//
//   ::= GlobalVar '=' OptionalLinkage OptionalPreemptionSpecifier
//       OptionalVisibility OptionalDLLStorageClass
//       OptionalThreadLocal OptionalUnnamedAddr OptionalAddrSpace
//       OptionalExternallyInitialized GlobalType Type Const OptionalAttrs
//   ::= OptionalLinkage OptionalPreemptionSpecifier OptionalVisibility
//       OptionalDLLStorageClass OptionalThreadLocal OptionalUnnamedAddr
//       OptionalAddrSpace OptionalExternallyInitialized GlobalType Type
//       Const OptionalAttrs

GlobalDecl
	: GlobalIdent "=" ExternLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr OptAddrSpace OptExternallyInitialized Immutable Type GlobalAttrs FuncAttrs   << astx.NewGlobal($0, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, (ast.Constant)(nil), $12, $13) >>
	| GlobalIdent "=" ExternLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr "alias" IndirectSymbol                                                       << astx.NewIndirectSymbol($0, $2, $3, $4, $5, $6, $7, true, $9) >>
	| GlobalIdent "=" ExternLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr "ifunc" IndirectSymbol                                                       << astx.NewIndirectSymbol($0, $2, $3, $4, $5, $6, $7, false, $9) >>
;

// ~~~ [ Global Variable Definition ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GlobalDef
	: GlobalIdent "=" OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr OptAddrSpace OptExternallyInitialized Immutable Type Constant GlobalAttrs FuncAttrs   << astx.NewGlobal($0, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) >>
	| GlobalIdent "=" OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr "alias" IndirectSymbol                                                                << astx.NewIndirectSymbol($0, $2, $3, $4, $5, $6, $7, false, $9) >>
	| GlobalIdent "=" OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr "ifunc" IndirectSymbol                                                                << astx.NewIndirectSymbol($0, $2, $3, $4, $5, $6, $7, false, $9) >>
;

// ref: ParseOptionalThreadLocal
//
//   := empty
//   := 'thread_local'
//   := 'thread_local' '(' tlsmodel ')'

OptThreadLocal
	: empty         << (*ast.ThreadLocal)(nil), nil >>
	| ThreadLocal
;

ThreadLocal
	: "thread_local"                    << astx.NewThreadLocal(ast.TLSModelNone) >>
	| "thread_local" "(" TLSModel ")"   << astx.NewThreadLocal($2) >>
;

// ref: ParseTLSModel
//
//   := 'localdynamic'
//   := 'initialexec'
//   := 'localexec'

TLSModel
	: "initialexec"    << ast.TLSModelInitialExec, nil >>
	| "localdynamic"   << ast.TLSModelLocalDynamic, nil >>
	| "localexec"      << ast.TLSModelLocalExec, nil >>
;

OptExternallyInitialized
	: empty                      << false, nil >>
	| "externally_initialized"   << true, nil >>
;

// ref: ParseGlobalType
//
//   ::= 'constant'
//   ::= 'global'

Immutable
	: "constant"   << true, nil >>
	| "global"     << false, nil >>
;

GlobalAttrs
	: empty               << ([]ast.GlobalAttribute)(nil), nil >>
	| "," GlobalAttrList   << $1, nil >>
;

GlobalAttrList
	: GlobalAttr                      << astx.NewGlobalAttrList($0) >>
	| GlobalAttrList "," GlobalAttr   << astx.AppendGlobalAttr($0, $2) >>
;

GlobalAttr
	: Section
	| Comdat
	| Alignment
	//   ::= !dbg !57
	| MetadataAttachment
;

// TODO: Move indirect symbols to alias and ifunc.

// ~~~ [ Indirect Symbol ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#aliases
// https://llvm.org/docs/LangRef.html#ifuncs

// ref: parseIndirectSymbol
//
//   ::= GlobalVar '=' OptionalLinkage OptionalPreemptionSpecifier
//                     OptionalVisibility OptionalDLLStorageClass
//                     OptionalThreadLocal OptionalUnnamedAddr
//                     'alias|ifunc' IndirectSymbol
//
//  IndirectSymbol
//   ::= TypeAndValue

IndirectSymbol
	: Type "," Type Constant   << astx.NewIndirectSymbolBody($0, $2, $3) >>
;

