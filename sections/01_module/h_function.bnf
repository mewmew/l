// ~~~ [ Function Declaration ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#functions

// ref: ParseDeclare
//
//   ::= 'declare' FunctionHeader

FunctionDecl
	: "declare" MetadataAttachments OptExternLinkage FunctionHeader
	<< &ast.Function{Linkage: $2.(ast.Linkage), Header: $3.(*ast.FunctionHeader), Metadata: $1.([]*ast.MetadataAttachment)}, nil >>
;

// ~~~ [ Function Definition ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#functions

// ref: ParseDefine
//
//   ::= 'define' FunctionHeader (!dbg !56)* '{' ...

FunctionDef
	: "define" OptLinkage FunctionHeader MetadataAttachments FunctionBody
	<< &ast.Function{Linkage: $1.(ast.Linkage), Header: $2.(*ast.FunctionHeader), Body: $4.(*ast.FunctionBody), Metadata: $3.([]*ast.MetadataAttachment)}, nil >>
;

// ref: ParseFunctionHeader
//
//   ::= OptionalLinkage OptionalPreemptionSpecifier OptionalVisibility
//       OptionalCallingConv OptRetAttrs OptUnnamedAddr Type GlobalName
//       '(' ArgList ')' OptFuncAttrs OptSection OptionalAlign OptGC
//       OptionalPrefix OptionalPrologue OptPersonalityFn

// TODO: Add OptAlignment before OptGC once the LR-1 conflict has been resolved,
// as FuncAttrs also contains "align".

FunctionHeader
	: OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptCallingConv ReturnAttrs Type GlobalIdent "(" Params ")" OptUnnamedAddr FuncAttrs OptSection OptComdat OptGC OptPrefix OptPrologue OptPersonality
	<< &ast.FunctionHeader{Preemption: $0.(ast.PreemptionSpecifier), Visibility: $1.(ast.Visibility), DLLStorageClass: $2.(ast.DLLStorageClass), CallingConv: $3.(ast.CallingConv), ReturnAttrs: $4.([]ast.ReturnAttribute), RetType: $5.(ast.Type), Name: $6.(ast.GlobalIdent), Params: $8.(*astx.Params).Params, Variadic: $8.(*astx.Params).Variadic, UnnamedAddr: $10.(ast.UnnamedAddr), FuncAttrs: $11.([]ast.FuncAttribute), Section: $12.(ast.Section), Comdat: $13.(*ast.Comdat), GC: $14.(string), Prefix: $15.(*ast.TypeConst), Prologue: $16.(*ast.TypeConst), Personality: $17.(*ast.TypeConst)}, nil >>
;

// ref: ParseOptionalCallingConv
//
//   ::= empty
//   ::= 'ccc'
//   ::= 'fastcc'
//   ::= 'intel_ocl_bicc'
//   ::= 'coldcc'
//   ::= 'x86_stdcallcc'
//   ::= 'x86_fastcallcc'
//   ::= 'x86_thiscallcc'
//   ::= 'x86_vectorcallcc'
//   ::= 'arm_apcscc'
//   ::= 'arm_aapcscc'
//   ::= 'arm_aapcs_vfpcc'
//   ::= 'msp430_intrcc'
//   ::= 'avr_intrcc'
//   ::= 'avr_signalcc'
//   ::= 'ptx_kernel'
//   ::= 'ptx_device'
//   ::= 'spir_func'
//   ::= 'spir_kernel'
//   ::= 'x86_64_sysvcc'
//   ::= 'win64cc'
//   ::= 'webkit_jscc'
//   ::= 'anyregcc'
//   ::= 'preserve_mostcc'
//   ::= 'preserve_allcc'
//   ::= 'ghccc'
//   ::= 'swiftcc'
//   ::= 'x86_intrcc'
//   ::= 'hhvmcc'
//   ::= 'hhvm_ccc'
//   ::= 'cxx_fast_tlscc'
//   ::= 'amdgpu_vs'
//   ::= 'amdgpu_ls'
//   ::= 'amdgpu_hs'
//   ::= 'amdgpu_es'
//   ::= 'amdgpu_gs'
//   ::= 'amdgpu_ps'
//   ::= 'amdgpu_cs'
//   ::= 'amdgpu_kernel'
//   ::= 'cc' UINT

OptCallingConv
	: empty         << ast.CallingConvNone, nil >>
	| CallingConv
;

CallingConv
	: "amdgpu_cs"          << ast.CallingConvAmdGPU_CS, nil >>
	| "amdgpu_es"          << ast.CallingConvAmdGPU_ES, nil >>
	| "amdgpu_gs"          << ast.CallingConvAmdGPU_GS, nil >>
	| "amdgpu_hs"          << ast.CallingConvAmdGPU_HS, nil >>
	| "amdgpu_kernel"      << ast.CallingConvAmdGPU_Kernel, nil >>
	| "amdgpu_ls"          << ast.CallingConvAmdGPU_LS, nil >>
	| "amdgpu_ps"          << ast.CallingConvAmdGPU_PS, nil >>
	| "amdgpu_vs"          << ast.CallingConvAmdGPU_VS, nil >>
	| "anyregcc"           << ast.CallingConvAnyReg, nil >>
	| "arm_aapcs_vfpcc"    << ast.CallingConvARM_AAPCS_VFP, nil >>
	| "arm_aapcscc"        << ast.CallingConvARM_AAPCS, nil >>
	| "arm_apcscc"         << ast.CallingConvARM_APCS, nil >>
	| "avr_intrcc"         << ast.CallingConvAVR_Intr, nil >>
	| "avr_signalcc"       << ast.CallingConvAVR_Signal, nil >>
	| "ccc"                << ast.CallingConvC, nil >>
	| "coldcc"             << ast.CallingConvCold, nil >>
	| "cxx_fast_tlscc"     << ast.CallingConvCXX_Fast_TLS, nil >>
	| "fastcc"             << ast.CallingConvFast, nil >>
	| "ghccc"              << ast.CallingConvGHC, nil >>
	| "hhvm_ccc"           << ast.CallingConvHHVM_C, nil >>
	| "hhvmcc"             << ast.CallingConvHHVM, nil >>
	| "intel_ocl_bicc"     << ast.CallingConvIntel_OCL_BI, nil >>
	| "msp430_intrcc"      << ast.CallingConvMSP430_Intr, nil >>
	| "preserve_allcc"     << ast.CallingConvPreserveAll, nil >>
	| "preserve_mostcc"    << ast.CallingConvPreserveMost, nil >>
	| "ptx_device"         << ast.CallingConvPTX_Device, nil >>
	| "ptx_kernel"         << ast.CallingConvPTX_Kernel, nil >>
	| "spir_func"          << ast.CallingConvSPIR_Func, nil >>
	| "spir_kernel"        << ast.CallingConvSPIR_Kernel, nil >>
	| "swiftcc"            << ast.CallingConvSwift, nil >>
	| "webkit_jscc"        << ast.CallingConvWebKitJS, nil >>
	| "win64cc"            << ast.CallingConvWin64, nil >>
	| "x86_64_sysvcc"      << ast.CallingConvX86_64_SysV, nil >>
	| "x86_fastcallcc"     << ast.CallingConvX86_FastCall, nil >>
	| "x86_intrcc"         << ast.CallingConvX86_Intr, nil >>
	| "x86_regcallcc"      << ast.CallingConvX86_RegCall, nil >>
	| "x86_stdcallcc"      << ast.CallingConvX86_StdCall, nil >>
	| "x86_thiscallcc"     << ast.CallingConvX86_ThisCall, nil >>
	| "x86_vectorcallcc"   << ast.CallingConvX86_VectorCall, nil >>
	| "cc" int_lit         << astx.NewCallingConv($1) >>
;

OptGC
	: empty
	<< "", nil >>
	| "gc" string_lit
	<< astx.String($1), nil >>
;

OptPrefix
	: empty
	<< (*ast.TypeConst)(nil), nil >>
	| "prefix" Type Constant
	<< astx.TypeConst($1, $2), nil >>
;

OptPrologue
	: empty
	<< (*ast.TypeConst)(nil), nil >>
	| "prologue" Type Constant
	<< astx.TypeConst($1, $2), nil >>
;

OptPersonality
	: empty
	<< (*ast.TypeConst)(nil), nil >>
	| "personality" Type Constant
	<< astx.TypeConst($1, $2), nil >>
;

// ref: ParseFunctionBody
//
//   ::= '{' BasicBlock+ UseListOrderDirective* '}'

FunctionBody
	: "{" BasicBlockList UseListOrders "}"
	<< &ast.FunctionBody{Blocks: $1.([]*ast.BasicBlock), UseListOrders: $2.([]*ast.UseListOrder)}, nil >>
;

