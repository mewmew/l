// ### [ Helper productions ] ##################################################

// ___ [ Function Attribute ] __________________________________________________

// ref: ParseFnAttributeValuePairs
//
//   ::= <attr> | <attr> '=' <value>

FuncAttrs
	: empty          << ([]ast.FuncAttribute)(nil), nil >>
	| FuncAttrList
;

FuncAttrList
	: FuncAttr                << astx.NewFuncAttrList($0) >>
	| FuncAttrList FuncAttr   << astx.AppendFuncAttr($0, $1) >>
;

FuncAttr
	// not used in attribute groups.
	: AttrGroupID
	// used in attribute groups.
	| "align" "=" int_lit               << ast.Alignment(astx.Int($2)), nil >>
	| "alignstack" "=" int_lit          << ast.StackAlignment(astx.Int($2)), nil >>
	// used in functions.
	| Alignment
	| AllocSize
	| StackAlignment
	| string_lit                        << ast.FuncAttrString(astx.String($0)) >>
	| string_lit "=" string_lit         << &ast.FuncAttrPair{Key: astx.String($0), Value: astx.String($2)}, nil >>
	| "alwaysinline"                    << ast.FuncAttrAlwaysInline, nil >>
	| "argmemonly"                      << ast.FuncAttrArgMemOnly, nil >>
	| "builtin"                         << ast.FuncAttrBuiltin, nil >>
	| "cold"                            << ast.FuncAttrCold, nil >>
	| "convergent"                      << ast.FuncAttrConvergent, nil >>
	| "inaccessiblemem_or_argmemonly"   << ast.FuncAttrInaccessibleMemOrArgMemOnly, nil >>
	| "inaccessiblememonly"             << ast.FuncAttrInaccessibleMemOnly, nil >>
	| "inlinehint"                      << ast.FuncAttrInlineHint, nil >>
	| "jumptable"                       << ast.FuncAttrJumpTable, nil >>
	| "minsize"                         << ast.FuncAttrMinSize, nil >>
	| "naked"                           << ast.FuncAttrNaked, nil >>
	| "nobuiltin"                       << ast.FuncAttrNoBuiltin, nil >>
	| "noduplicate"                     << ast.FuncAttrNoDuplicate, nil >>
	| "noimplicitfloat"                 << ast.FuncAttrNoImplicitFloat, nil >>
	| "noinline"                        << ast.FuncAttrNoInline, nil >>
	| "nonlazybind"                     << ast.FuncAttrNonLazyBind, nil >>
	| "norecurse"                       << ast.FuncAttrNoRecurse, nil >>
	| "noredzone"                       << ast.FuncAttrNoRedZone, nil >>
	| "noreturn"                        << ast.FuncAttrNoReturn, nil >>
	| "nounwind"                        << ast.FuncAttrNoUnwind, nil >>
	| "optnone"                         << ast.FuncAttrOptNone, nil >>
	| "optsize"                         << ast.FuncAttrOptSize, nil >>
	| "readnone"                        << ast.FuncAttrReadNone, nil >>
	| "readonly"                        << ast.FuncAttrReadOnly, nil >>
	| "returns_twice"                   << ast.FuncAttrReturnsTwice, nil >>
	| "safestack"                       << ast.FuncAttrSafeStack, nil >>
	| "sanitize_address"                << ast.FuncAttrSanitizeAddress, nil >>
	| "sanitize_hwaddress"              << ast.FuncAttrSanitizeHWAddress, nil >>
	| "sanitize_memory"                 << ast.FuncAttrSanitizeMemory, nil >>
	| "sanitize_thread"                 << ast.FuncAttrSanitizeThread, nil >>
	| "speculatable"                    << ast.FuncAttrSpeculatable, nil >>
	| "ssp"                             << ast.FuncAttrSSP, nil >>
	| "sspreq"                          << ast.FuncAttrSSPReq, nil >>
	| "sspstrong"                       << ast.FuncAttrSSPStrong, nil >>
	| "strictfp"                        << ast.FuncAttrStrictFP, nil >>
	| "uwtable"                         << ast.FuncAttrUwtable, nil >>
	| "writeonly"                       << ast.FuncAttrWriteOnly, nil >>
;

// ___ [ Return Attribute ] __________________________________________________

// ref: ParseOptionalReturnAttrs

ReturnAttrs
	: empty            << ([]ast.ReturnAttribute)(nil), nil >>
	| ReturnAttrList
;

ReturnAttrList
	: ReturnAttr                  << astx.NewReturnAttrList($0) >>
	| ReturnAttrList ReturnAttr   << astx.AppendReturnAttr($0, $1) >>
;

ReturnAttr
	: Alignment
	| Dereferenceable
	| string_lit        << ast.NewReturnAttrString($0) >>
	| "inreg"           << ast.ReturnAttrInReg, nil >>
	| "noalias"         << ast.ReturnAttrNoAlias, nil >>
	| "nonnull"         << ast.ReturnAttrNonNull, nil >>
	| "signext"         << ast.ReturnAttrSignExt, nil >>
	| "zeroext"         << ast.ReturnAttrZeroExt, nil >>
;

// ___ [ Parameter Attribute ] _________________________________________________

// ref: ParseOptionalParamAttrs

ParamAttrs
	: empty           << ([]ast.ParamAttribute)(nil), nil >>
	| ParamAttrList
;

ParamAttrList
	: ParamAttr                 << astx.NewParamAttrList($0) >>
	| ParamAttrList ParamAttr   << astx.AppendParamAttr($0, $1) >>
;

// ref: ParseOptionalDerefAttrBytes
//
//   ::= empty
//   ::= AttrKind '(' 4 ')'

ParamAttr
	: Alignment
	| Dereferenceable
	| string_lit        << ast.NewParamAttrString($0) >>
	| "byval"           << ast.ParamAttrByval, nil >>
	| "inalloca"        << ast.ParamAttrInAlloca, nil >>
	| "inreg"           << ast.ParamAttrInReg, nil >>
	| "nest"            << ast.ParamAttrNest, nil >>
	| "noalias"         << ast.ParamAttrNoAlias, nil >>
	| "nocapture"       << ast.ParamAttrNoCapture, nil >>
	| "nonnull"         << ast.ParamAttrNonNull, nil >>
	| "readnone"        << ast.ParamAttrReadNone, nil >>
	| "readonly"        << ast.ParamAttrReadOnly, nil >>
	| "returned"        << ast.ParamAttrReturned, nil >>
	| "signext"         << ast.ParamAttrSignExt, nil >>
	| "sret"            << ast.ParamAttrSRet, nil >>
	| "swifterror"      << ast.ParamAttrSwiftError, nil >>
	| "swiftself"       << ast.ParamAttrSwiftSelf, nil >>
	| "writeonly"       << ast.ParamAttrWriteOnly, nil >>
	| "zeroext"         << ast.ParamAttrZeroExt, nil >>
;

// ___ [ Attributes ] __________________________________________________________

// ref: ParseOptionalAddrSpace
//
//   := empty
//   := 'addrspace' '(' uint32 ')'

OptAddrSpace
	: empty       << ast.AddrSpace(0), nil >>
	| AddrSpace
;

AddrSpace
	: "addrspace" "(" int_lit ")"   << ast.AddrSpace(astx.Int($2)) >>
;

// ref: ParseOptionalAlignment
//
//   ::= empty
//   ::= 'align' 4

Alignment
	: "align" int_lit   << ast.Alignment(astx.Int($1)), nil >>
;

// ref: parseAllocSizeArguments

AllocSize
	: "allocsize" "(" int_lit ")"               << &ast.AllocSize{BaseSize: astx.Int($2)}, nil >>
	| "allocsize" "(" int_lit "," int_lit ")"   << &ast.AllocSize{BaseSize: astx.Int($2), N: astx.Int($4)}, nil >>
;

// ref: parseOptionalComdat

OptComdat
	: empty    << (*ast.Comdat)(nil), nil >>
	| Comdat
;

Comdat
	: "comdat"                      << &ast.Comdat{} >>
	| "comdat" "(" ComdatName ")"   << &ast.Comdat{Name: astx.ComdatName($2)} >>
;

Dereferenceable
	: "dereferenceable" "(" int_lit ")"           << &ast.Dereferenceable{N: astx.Int($2), Null: false}, nil >>
	| "dereferenceable_or_null" "(" int_lit ")"   << &ast.Dereferenceable{N: astx.Int($2), Null: true}, nil >>
;

// https://llvm.org/docs/LangRef.html#dll-storage-classes

// ref: ParseOptionalDLLStorageClass
//
//   ::= empty
//   ::= 'dllimport'
//   ::= 'dllexport'

OptDLLStorageClass
	: empty             << ast.DLLStorageClassNone, nil >>
	| DLLStorageClass
;

DLLStorageClass
	: "dllexport"   << ast.DLLStorageClassDLLExport, nil >>
	| "dllimport"   << ast.DLLStorageClassDLLImport, nil >>
;

// https://llvm.org/docs/LangRef.html#linkage-types

// ref: ParseOptionalLinkage
//
//   ::= empty
//   ::= 'private'
//   ::= 'internal'
//   ::= 'weak'
//   ::= 'weak_odr'
//   ::= 'linkonce'
//   ::= 'linkonce_odr'
//   ::= 'available_externally'
//   ::= 'appending'
//   ::= 'common'
//   ::= 'extern_weak'
//   ::= 'external'

OptLinkage
	: empty     << ast.LinkageNone, nil >>
	| Linkage
;

Linkage
	: "appending"              << ast.LinkageAppending, nil >>
	| "available_externally"   << ast.LinkageAvailableExternally, nil >>
	| "common"                 << ast.LinkageCommon, nil >>
	| "internal"               << ast.LinkageInternal, nil >>
	| "linkonce"               << ast.LinkageLinkOnce, nil >>
	| "linkonce_odr"           << ast.LinkageLinkOnceODR, nil >>
	| "private"                << ast.LinkagePrivate, nil >>
	| "weak"                   << ast.LinkageWeak, nil >>
	| "weak_odr"               << ast.LinkageWeakODR, nil >>
;

OptExternLinkage
	: empty           << ast.LinkageNone, nil >>
	| ExternLinkage
;

ExternLinkage
	: "extern_weak"   << ast.LinkageExternWeak, nil >>
	| "external"      << ast.LinkageExternal, nil >>
;

// https://llvm.org/docs/LangRef.html#runtime-preemption-model

// ref: ParseOptionalDSOLocal

OptPreemptionSpecifier
	: empty                 << ast.PreemptionSpecifierNone, nil >>
	| PreemptionSpecifier
;

PreemptionSpecifier
	: "dso_local"         << ast.PreemptionSpecifierDSOLocal, nil >>
	| "dso_preemptable"   << ast.PreemptionSpecifierDSOPreemptable, nil >>
;

OptSection
	: empty     << (*ast.Section)(nil) >>
	| Section
;

Section
	: "section" string_lit   << &ast.Section{Name: astx.String($1)}, nil >>
;

// ref: ParseOptionalStackAlignment
//
//   ::= empty
//   ::= 'alignstack' '(' 4 ')'
StackAlignment
	: "alignstack" "(" int_lit ")"   << ast.StackAlignment(astx.Int($2)) >>
;

// ref: ParseOptionalUnnamedAddr

OptUnnamedAddr
	: empty         << ast.UnnamedAddrNone, nil >>
	| UnnamedAddr
;

UnnamedAddr
	: "local_unnamed_addr"   << ast.UnnamedAddrLocalUnnamedAddr, nil >>
	| "unnamed_addr"         << ast.UnnamedAddrUnnamedAddr, nil >>
;

// https://llvm.org/docs/LangRef.html#visibility-styles

// ref: ParseOptionalVisibility
//
//   ::= empty
//   ::= 'default'
//   ::= 'hidden'
//   ::= 'protected'

OptVisibility
	: empty        << ast.VisibilityNone, nil >>
	| Visibility
;

Visibility
	: "default"     << ast.VisibilityDefault, nil >>
	| "hidden"      << ast.VisibilityHidden, nil >>
	| "protected"   << ast.VisibilityProtected, nil >>
;

// ___ [ Instruction Operands ] ________________________________________________

// ref: ParseCmpPredicate

IPred
	: "eq"    << ast.IPredEQ, nil >>
	| "ne"    << ast.IPredNE, nil >>
	| "sge"   << ast.IPredSGE, nil >>
	| "sgt"   << ast.IPredSGT, nil >>
	| "sle"   << ast.IPredSLE, nil >>
	| "slt"   << ast.IPredSLT, nil >>
	| "uge"   << ast.IPredUGE, nil >>
	| "ugt"   << ast.IPredUGT, nil >>
	| "ule"   << ast.IPredULE, nil >>
	| "ult"   << ast.IPredULT, nil >>
;

// ref: ParseCmpPredicate

FPred
	: "false"   << ast.FPredFalse, nil >>
	| "oeq"     << ast.FPredOEQ, nil >>
	| "oge"     << ast.FPredOGE, nil >>
	| "ogt"     << ast.FPredOGT, nil >>
	| "ole"     << ast.FPredOLE, nil >>
	| "olt"     << ast.FPredOLT, nil >>
	| "one"     << ast.FPredONE, nil >>
	| "ord"     << ast.FPredORD, nil >>
	| "true"    << ast.FPredTrue, nil >>
	| "ueq"     << ast.FPredUEQ, nil >>
	| "uge"     << ast.FPredUGE, nil >>
	| "ugt"     << ast.FPredUGT, nil >>
	| "ule"     << ast.FPredULE, nil >>
	| "ult"     << ast.FPredULT, nil >>
	| "une"     << ast.FPredUNE, nil >>
	| "uno"     << ast.FPredUNO, nil >>
;

OverflowFlags
	: empty              << ([]ast.OverflowFlag)(nil), nil >>
	| OverflowFlagList
;

OverflowFlagList
	: OverflowFlag                    << astx.NewOverflowFlagList($0) >>
	| OverflowFlagList OverflowFlag   << astx.AppendOverflowFlag($0, $1) >>
;

OverflowFlag
	: "nsw"   << ast.OverflowFlagNSW, nil >>
	| "nuw"   << ast.OverflowFlagNUW, nil >>
;

OptExact
	: empty     << false, nil >>
	| "exact"   << true, nil >>
;

// ref: EatFastMathFlagsIfPresent

FastMathFlags
	: empty              << ([]ast.FastMathFlag)(nil), nil >>
	| FastMathFlagList
;

FastMathFlagList
	: FastMathFlag                    << astx.NewFastMathFlagList($0) >>
	| FastMathFlagList FastMathFlag   << astx.AppendFastMathFlag($0, $1) >>
;

FastMathFlag
	: "afn"        << ast.FastMathFlagAFn, nil >>
	| "arcp"       << ast.FastMathFlagARcp, nil >>
	| "contract"   << ast.FastMathFlagContract, nil >>
	| "fast"       << ast.FastMathFlagFast, nil >>
	| "ninf"       << ast.FastMathFlagNInf, nil >>
	| "nnan"       << ast.FastMathFlagNNaN, nil >>
	| "nsz"        << ast.FastMathFlagNSZ, nil >>
	| "reassoc"    << ast.FastMathFlagReassoc, nil >>
;

OptInBounds
	: empty        << false, nil >>
	| "inbounds"   << true, nil >>
;

// ref: ParseOptionalOperandBundles
//
//    ::= empty
//    ::= '[' OperandBundle [, OperandBundle ]* ']'
//
//  OperandBundle
//    ::= bundle-tag '(' ')'
//    ::= bundle-tag '(' Type Value [, Type Value ]* ')'
//
//  bundle-tag ::= String Constant

OperandBundles
	: empty                       << ([]*ast.OperandBundle)(nil), nil >>
	| "[" OperandBundleList "]"   << $1, nil >>
;

OperandBundleList
	: OperandBundle                     << astx.NewOperandBundleList($0) >>
	| OperandBundleList OperandBundle   << astx.AppendOperandBundle($0, $1) >>
;

OperandBundle
	: string_lit "(" TypeValues ")"   << &ast.OperandBundle{Tag: astx.Int($0), Inputs: astx.TypeValues($2)}, nil >>
;

OptVolatile
	: empty        << false, nil >>
	| "volatile"   << true, nil >>
;

// ref: ParseScope
//
//   ::= syncscope("singlethread" | "<target scope>")?

OptSyncScope
	: empty                            << ast.SyncScope(""), nil >>
	| "syncscope" "(" string_lit ")"   << ast.SyncScope(astx.String($2)), nil >>
;

// ref: ParseOrdering
//
//   ::= AtomicOrdering

AtomicOrdering
	: "acq_rel"     << ast.AtomicOrderingAcqRel, nil >>
	| "acquire"     << ast.AtomicOrderingAcquire, nil >>
	| "monotonic"   << ast.AtomicOrderingMonotonic, nil >>
	| "release"     << ast.AtomicOrderingRelease, nil >>
	| "seq_cst"     << ast.AtomicOrderingSeqCst, nil >>
	| "unordered"   << ast.AtomicOrderingUnordered, nil >>
;

ExceptionScope
	: NoneConst
	| LocalIdent
;

// ref: ParseIndexList
//
//    ::=  (',' uint32)+

Indices
	: empty           << ([]int64)(nil), nil >>
	| "," IndexList   << $1, nil >>
;

IndexList
	: Index                 << astx.NewIndexList($0) >>
	| IndexList "," Index   << astx.AppendIndex($0, $2) >>
;

Index
	: int_lit   << astx.NewInt($0) >>
;

TypeValues
	: empty           << ([]*ast.TypeValue)(nil), nil >>
	| TypeValueList
;

TypeValueList
	: TypeValue
	| TypeValueList TypeValue
;

TypeValue
	: Type Value
;

TypeConsts
	: empty
	| TypeConstList
;

TypeConstList
	: TypeConst
	| TypeConstList "," TypeConst
;

TypeConst
	: Type Constant
;

// ref: ParseParameterList
//
//    ::= '(' ')'
//    ::= '(' Arg (',' Arg)* ')'
//  Arg
//    ::= Type OptionalAttributes Value OptionalAttributes

Args
	: empty
	| "..."
	| ArgList
	| ArgList "," "..."
;

ArgList
	: Arg
	| ArgList "," Arg
;

// ref: ParseMetadataAsValue
//
//  ::= metadata i32 %local
//  ::= metadata i32 @global
//  ::= metadata i32 7
//  ::= metadata !0
//  ::= metadata !{...}
//  ::= metadata !"string"

Arg
	: ConcreteType ParamAttrs Value
	| MetadataType Metadata
;

// ref: ParseExceptionArgs

ExceptionArgs
	: empty
	| ExceptionArgList
;

ExceptionArgList
	: ExceptionArg
	| ExceptionArgList "," ExceptionArg
;

ExceptionArg
	: ConcreteType Value
	| MetadataType Metadata
;

// ref: ParseArgumentList
//
//   ::= '(' ArgTypeListI ')'
//  ArgTypeListI
//   ::= empty
//   ::= '...'
//   ::= ArgTypeList ',' '...'
//   ::= ArgType (',' ArgType)*

Params
	: empty
	| "..."
	| ParamList
	| ParamList "," "..."
;

ParamList
	: Param
	| ParamList "," Param
;

Param
	: Type ParamAttrs
	| Type LocalIdent ParamAttrs
;

