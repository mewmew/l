// ### [ Helper productions ] ##################################################

// ref: ParseOptionalAlignment
//
//   ::= empty
//   ::= 'align' 4

Alignment
	: "align" int_lit
;

// ref: ParseOptionalAddrSpace
//
//   := empty
//   := 'addrspace' '(' uint32 ')'

OptAddrSpace
	: empty
	| AddrSpace
;

AddrSpace
	: "addrspace" "(" int_lit ")"
;

// ref: parseOptionalComdat

OptComdat
	: empty
	| Comdat
;

Comdat
	: "comdat"
	| "comdat" "(" ComdatName ")"
;

// ref: ParseIndexList
//
//    ::=  (',' uint32)+

Indices
	: empty
	| "," IndexList
;

IndexList
	: Index
	| IndexList "," Index
;

Index
	: int_lit
;

// ref: ParseCmpPredicate

IPred
	: "eq"
	| "ne"
	| "slt"
	| "sgt"
	| "sle"
	| "sge"
	| "ult"
	| "ugt"
	| "ule"
	| "uge"
;

FPred
	: "oeq"
	| "one"
	| "olt"
	| "ogt"
	| "ole"
	| "oge"
	| "ord"
	| "uno"
	| "ueq"
	| "une"
	| "ult"
	| "ugt"
	| "ule"
	| "uge"
	| "true"
	| "false"
;

OverflowFlags
	: empty
	| OverflowFlagList
;

OverflowFlagList
	: OverflowFlag
	| OverflowFlagList OverflowFlag
;

OverflowFlag
	: "nuw"
	| "nsw"
;

OptExact
	: empty
	| "exact"
;

// ref: EatFastMathFlagsIfPresent

FastMathFlags
	: empty
	| FastMathFlagList
;

FastMathFlagList
	: FastMathFlag
	| FastMathFlagList FastMathFlag
;

FastMathFlag
	: "fast"
	| "nnan"
	| "ninf"
	| "nsz"
	| "arcp"
	| "contract"
	| "reassoc"
	| "afn"
;

OptInBounds
	: empty
	| "inbounds"
;

Elems
	: empty
	| ElemList
;

ElemList
	: Elem
	| ElemList "," Elem
;

Elem
	: Type Constant
;

// https://llvm.org/docs/LangRef.html#linkage-types

// ref: ParseOptionalLinkage
//
//   ::= empty
//   ::= 'private'
//   ::= 'internal'
//   ::= 'weak'
//   ::= 'weak_odr'
//   ::= 'linkonce'
//   ::= 'linkonce_odr'
//   ::= 'available_externally'
//   ::= 'appending'
//   ::= 'common'
//   ::= 'extern_weak'
//   ::= 'external'

OptLinkage
	: empty
	| Linkage
;

Linkage
	: "private"
	| "internal"
	| "weak"
	| "weak_odr"
	| "linkonce"
	| "linkonce_odr"
	| "available_externally"
	| "appending"
	| "common"
;

OptExternLinkage
	: empty
	| ExternLinkage
;

ExternLinkage
	: "extern_weak"
	| "external"
;

// https://llvm.org/docs/LangRef.html#runtime-preemption-model

// ref: ParseOptionalDSOLocal

OptPreemptionSpecifier
	: empty
	| PreemptionSpecifier
;

PreemptionSpecifier
	: "dso_local"
	| "dso_preemptable"
;

// https://llvm.org/docs/LangRef.html#visibility-styles

// ref: ParseOptionalVisibility
//
//   ::= empty
//   ::= 'default'
//   ::= 'hidden'
//   ::= 'protected'

OptVisibility
	: empty
	| Visibility
;

Visibility
	: "default"
	| "hidden"
	| "protected"
;

// https://llvm.org/docs/LangRef.html#dll-storage-classes

// ref: ParseOptionalDLLStorageClass
//
//   ::= empty
//   ::= 'dllimport'
//   ::= 'dllexport'

OptDLLStorageClass
	: empty
	| DLLStorageClass
;

DLLStorageClass
	: "dllimport"
	| "dllexport"
;

// ref: ParseOptionalUnnamedAddr

OptUnnamedAddr
	: empty
	| UnnamedAddr
;

UnnamedAddr
	: "unnamed_addr"
	| "local_unnamed_addr"
;

// ref: ParseFnAttributeValuePairs
//
//   ::= <attr> | <attr> '=' <value>

FuncAttrs
	: empty
	| FuncAttrList
;

FuncAttrList
	: FuncAttr
	| FuncAttrList FuncAttr
;

FuncAttr
	: "builtin"
	| AttrGroupID // not used in attribute groups.
	| string_lit
	| string_lit "=" string_lit
	| "align" "=" int_lit // used in attribute groups.
	| Alignment // used in functions.
	| "alignstack" "=" int_lit
	| StackAlignment
	| AllocSize
	| "alwaysinline"
	| "argmemonly"
	| "builtin"
	| "cold"
	| "convergent"
	| "inaccessiblememonly"
	| "inaccessiblemem_or_argmemonly"
	| "inlinehint"
	| "jumptable"
	| "minsize"
	| "naked"
	| "nobuiltin"
	| "noduplicate"
	| "noimplicitfloat"
	| "noinline"
	| "nonlazybind"
	| "noredzone"
	| "noreturn"
	| "norecurse"
	| "nounwind"
	| "optnone"
	| "optsize"
	| "readnone"
	| "readonly"
	| "returns_twice"
	| "speculatable"
	| "ssp"
	| "sspreq"
	| "sspstrong"
	| "safestack"
	| "sanitize_address"
	| "sanitize_hwaddress"
	| "sanitize_thread"
	| "sanitize_memory"
	| "strictfp"
	| "uwtable"
	| "writeonly"
;

// ref: ParseOptionalStackAlignment
//
//   ::= empty
//   ::= 'alignstack' '(' 4 ')'
StackAlignment
	: "alignstack" "(" int_lit ")"
;

// ref: parseAllocSizeArguments

AllocSize
	: "allocsize" "(" int_lit ")"
	| "allocsize" "(" int_lit "," int_lit ")"
;

OptSection
	: empty
	| Section
;

Section
	: "section" string_lit
;

// ref: ParseOptionalParamAttrs

ParamAttrs
	: empty
	| ParamAttrList
;

ParamAttrList
	: ParamAttr
	| ParamAttrList ParamAttr
;

// ref: ParseOptionalDerefAttrBytes
//
//   ::= empty
//   ::= AttrKind '(' 4 ')'

ParamAttr
	: string_lit
	| Alignment
	| "byval"
	| Dereferenceable
	| "inalloca"
	| "inreg"
	| "nest"
	| "noalias"
	| "nocapture"
	| "nonnull"
	| "readnone"
	| "readonly"
	| "returned"
	| "signext"
	| "sret"
	| "swifterror"
	| "swiftself"
	| "writeonly"
	| "zeroext"
;

Dereferenceable
	: "dereferenceable" "(" int_lit ")"
	| "dereferenceable_or_null" "(" int_lit ")"
;

// ref: ParseParameterList
//
//    ::= '(' ')'
//    ::= '(' Arg (',' Arg)* ')'
//  Arg
//    ::= Type OptionalAttributes Value OptionalAttributes

Args
	: empty
	| "..."
	| ArgList
	| ArgList "," "..."
;

ArgList
	: Arg
	| ArgList "," Arg
;

// ref: ParseMetadataAsValue
//
//  ::= metadata i32 %local
//  ::= metadata i32 @global
//  ::= metadata i32 7
//  ::= metadata !0
//  ::= metadata !{...}
//  ::= metadata !"string"

Arg
	: ConcreteType ParamAttrs Value
	| MetadataType Metadata
;

// ref: ParseOptionalReturnAttrs

ReturnAttrs
	: empty
	| ReturnAttrList
;

ReturnAttrList
	: ReturnAttr
	| ReturnAttrList ReturnAttr
;

ReturnAttr
	: string_lit
	| Dereferenceable
	| Alignment
	| "inreg"
	| "noalias"
	| "nonnull"
	| "signext"
	| "zeroext"
;

// ref: ParseOptionalOperandBundles
//
//    ::= empty
//    ::= '[' OperandBundle [, OperandBundle ]* ']'
//
//  OperandBundle
//    ::= bundle-tag '(' ')'
//    ::= bundle-tag '(' Type Value [, Type Value ]* ')'
//
//  bundle-tag ::= String Constant

OperandBundles
	: empty
	| "[" OperandBundleList "]"
;

OperandBundleList
	: OperandBundle
	| OperandBundleList OperandBundle
;

OperandBundle
	: string_lit "(" BundleInputs ")"
;

BundleInputs
	: empty
	| BundleInputList
;

BundleInputList
	: BundleInput
	| BundleInputList BundleInput
;

BundleInput
	: Type Value
;

OptVolatile
	: empty
	| "volatile"
;

// ref: ParseScope
//
//   ::= syncscope("singlethread" | "<target scope>")?

OptSyncScope
	: empty
	| "syncscope" "(" string_lit ")"
;

// ref: ParseOrdering
//
//   ::= AtomicOrdering

AtomicOrdering
	: "unordered"
	| "monotonic"
	| "acquire"
	| "release"
	| "acq_rel"
	| "seq_cst"
;

ExceptionScope
	: "none"
	| LocalIdent
;

UnwindTarget
	: "to" "caller"
	| LabelType LocalIdent
;

// ref: ParseExceptionArgs

ExceptionArgs
	: empty
	| ExceptionArgList
;

ExceptionArgList
	: ExceptionArg
	| ExceptionArgList "," ExceptionArg
;

ExceptionArg
	: ConcreteType Value
	| MetadataType Metadata
;

