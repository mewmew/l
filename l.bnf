// The LLVM IR grammar has been based on the source code of the official LLVM
// project, as of 2018-02-19 (rev db070bbdacd303ae7da129f59beaf35024d94c53).
//
//    * lib/AsmParser/LLParser.cpp

// === [ Module ] ==============================================================

// https://llvm.org/docs/LangRef.html#module-structure

/*
/// Run: module ::= toplevelentity*
bool LLParser::Run() {
*/

Module
	: TopLevelEntity
;

TopLevelEntities
	: empty
	| TopLevelEntityList
;

TopLevelEntityList
	: TopLevelEntity
	| TopLevelEntityList TopLevelEntity
;

//===----------------------------------------------------------------------===//
// Top-Level Entities
//===----------------------------------------------------------------------===//

/*
bool LLParser::ParseTopLevelEntities() {
*/

TopLevelEntity
	: Declare
	| Define
	| ModuleAsm
	| TargetDefinition
	| SourceFileName
	| UnnamedType
	| NamedType
	| UnnamedGlobal
	| NamedGlobal
	| Comdat
	| StandaloneMetadata
	| NamedMetadata
	| UnnamedAttrGrp
	| UseListOrder
	| UseListOrderBB
;

// --- [ Module-level Inline Assembly ] ----------------------------------------

// https://llvm.org/docs/LangRef.html#module-level-inline-assembly

/*
/// toplevelentity
///   ::= 'module' 'asm' STRINGCONSTANT
bool LLParser::ParseModuleAsm() {
*/

ModuleAsm
	: "module" "asm" string_lit
;

// --- [ Target Definition ] ---------------------------------------------------

// https://llvm.org/docs/LangRef.html#target-triple
// https://llvm.org/docs/LangRef.html#data-layout

/*
/// toplevelentity
///   ::= 'target' 'triple' '=' STRINGCONSTANT
///   ::= 'target' 'datalayout' '=' STRINGCONSTANT
bool LLParser::ParseTargetDefinition() {
*/

TargetDefinition
	: "target" "triple" "=" string_lit
	| "target" "datalayout" "=" string_lit
;

// --- [ Source Filename ] -----------------------------------------------------

// https://llvm.org/docs/LangRef.html#source-filename

/*
/// toplevelentity
///   ::= 'source_filename' '=' STRINGCONSTANT
bool LLParser::ParseSourceFileName() {
*/

SourceFileName
	: "source_filename" "=" string_lit
;

// --- [ Unnamed Type ] --------------------------------------------------------

// https://llvm.org/docs/LangRef.html#structure-type

/*
/// ParseUnnamedType:
///   ::= LocalVarID '=' 'type' type
bool LLParser::ParseUnnamedType() {
*/

UnnamedType
	: LocalVarID "=" "type" Type
;

// --- [ Named Type ] ----------------------------------------------------------

// https://llvm.org/docs/LangRef.html#structure-type

/*
/// toplevelentity
///   ::= LocalVar '=' 'type' type
bool LLParser::ParseNamedType() {
*/

NamedType
	: LocalVar "=" "type" Type
;

// --- [ Function Declaration ] ------------------------------------------------

// https://llvm.org/docs/LangRef.html#functions

/*
/// toplevelentity
///   ::= 'declare' FunctionHeader
bool LLParser::ParseDeclare() {
*/

// NOTE: MetadataAttachment* not part of BNF comment; it should be.

Declare
	: "declare" MetadataAttachments FunctionHeader
;

// --- [ Function Definition ] -------------------------------------------------

// https://llvm.org/docs/LangRef.html#functions

/*
/// toplevelentity
///   ::= 'define' FunctionHeader (!dbg !56)* '{' ...
bool LLParser::ParseDefine() {
*/

Define
	: "define" FunctionHeader OptFunctionMetadata FunctionBody
;

/*
/// FunctionHeader
///   ::= OptionalLinkage OptionalPreemptionSpecifier OptionalVisibility
///       OptionalCallingConv OptRetAttrs OptUnnamedAddr Type GlobalName
///       '(' ArgList ')' OptFuncAttrs OptSection OptionalAlign OptGC
///       OptionalPrefix OptionalPrologue OptPersonalityFn
bool LLParser::ParseFunctionHeader(Function *&Fn, bool isDefine) {
*/

FunctionHeader
	: OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptCallingConv ReturnAttrs Type GlobalIdent "(" Arguments ")" OptUnnamedAddr FnAttributeValuePairs OptSection OptComdat OptAlignment OptGC OptPrefix OptPrologue OptPersonality
;

/*
/// ParseOptionalCallingConv
///   ::= empty
///   ::= 'ccc'
///   ::= 'fastcc'
///   ::= 'intel_ocl_bicc'
///   ::= 'coldcc'
///   ::= 'x86_stdcallcc'
///   ::= 'x86_fastcallcc'
///   ::= 'x86_thiscallcc'
///   ::= 'x86_vectorcallcc'
///   ::= 'arm_apcscc'
///   ::= 'arm_aapcscc'
///   ::= 'arm_aapcs_vfpcc'
///   ::= 'msp430_intrcc'
///   ::= 'avr_intrcc'
///   ::= 'avr_signalcc'
///   ::= 'ptx_kernel'
///   ::= 'ptx_device'
///   ::= 'spir_func'
///   ::= 'spir_kernel'
///   ::= 'x86_64_sysvcc'
///   ::= 'win64cc'
///   ::= 'webkit_jscc'
///   ::= 'anyregcc'
///   ::= 'preserve_mostcc'
///   ::= 'preserve_allcc'
///   ::= 'ghccc'
///   ::= 'swiftcc'
///   ::= 'x86_intrcc'
///   ::= 'hhvmcc'
///   ::= 'hhvm_ccc'
///   ::= 'cxx_fast_tlscc'
///   ::= 'amdgpu_vs'
///   ::= 'amdgpu_ls'
///   ::= 'amdgpu_hs'
///   ::= 'amdgpu_es'
///   ::= 'amdgpu_gs'
///   ::= 'amdgpu_ps'
///   ::= 'amdgpu_cs'
///   ::= 'amdgpu_kernel'
///   ::= 'cc' UINT
///
bool LLParser::ParseOptionalCallingConv(unsigned &CC) {
*/

OptCallingConv
	: empty
	| CallingConv
;

CallingConv
	: "ccc"
	| "fastcc"
	| "coldcc"
	| "x86_stdcallcc"
	| "x86_fastcallcc"
	| "x86_regcallcc"
	| "x86_thiscallcc"
	| "x86_vectorcallcc"
	| "arm_apcscc"
	| "arm_aapcscc"
	| "arm_aapcs_vfpcc"
	| "msp430_intrcc"
	| "avr_intrcc"
	| "avr_signalcc"
	| "ptx_kernel"
	| "ptx_device"
	| "spir_kernel"
	| "spir_func"
	| "intel_ocl_bicc"
	| "x86_64_sysvcc"
	| "win64cc"
	| "webkit_jscc"
	| "anyregcc"
	| "preserve_mostcc"
	| "preserve_allcc"
	| "ghccc"
	| "swiftcc"
	| "x86_intrcc"
	| "hhvmcc"
	| "hhvm_ccc"
	| "cxx_fast_tlscc"
	| "amdgpu_vs"
	| "amdgpu_ls"
	| "amdgpu_hs"
	| "amdgpu_es"
	| "amdgpu_gs"
	| "amdgpu_ps"
	| "amdgpu_cs"
	| "amdgpu_kernel"
	| "cc" int_lit
;

/*
bool LLParser::parseOptionalComdat(StringRef GlobalName, Comdat *&C) {
*/

OptComdat
	: empty
	| "comdat"
	| "comdat" "(" ComdatVar ")"

OptGC
	: empty
	: "gc" string_lit
;

OptPrefix
	: empty
	| "prefix" GlobalTypeAndValue
;

OptPrologue
	: empty
	| "prologue" GlobalTypeAndValue
;

OptPersonality
	: empty
	| "personality" GlobalTypeAndValue
;

// --- [ Unnamed Global Variable ] ---------------------------------------------

// https://llvm.org/docs/LangRef.html#global-variables

/*
/// ParseUnnamedGlobal:
///   OptionalVisibility (ALIAS | IFUNC) ...
///   OptionalLinkage OptionalPreemptionSpecifier OptionalVisibility
///   OptionalDLLStorageClass
///                                                     ...   -> global variable
///   GlobalID '=' OptionalVisibility (ALIAS | IFUNC) ...
///   GlobalID '=' OptionalLinkage OptionalPreemptionSpecifier OptionalVisibility
///                OptionalDLLStorageClass
///                                                     ...   -> global variable
bool LLParser::ParseUnnamedGlobal() {
*/

// NOTE: Global variable without GlobalID part of BNF comment; it should not be.

UnnamedGlobal
	: GlobalID "=" OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr Global
	| GlobalID "=" OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr "alias" IndirectSymbol
	| GlobalID "=" OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr "ifunc" IndirectSymbol
;

// https://llvm.org/docs/LangRef.html#linkage-types

/*
/// ParseOptionalLinkage
///   ::= empty
///   ::= 'private'
///   ::= 'internal'
///   ::= 'weak'
///   ::= 'weak_odr'
///   ::= 'linkonce'
///   ::= 'linkonce_odr'
///   ::= 'available_externally'
///   ::= 'appending'
///   ::= 'common'
///   ::= 'extern_weak'
///   ::= 'external'
bool LLParser::ParseOptionalLinkage(unsigned &Res, bool &HasLinkage,
*/

OptLinkage
	: empty
	| Linkage
;

Linkage
	: "private"
	| "internal"
	| "weak"
	| "weak_odr"
	| "linkonce"
	| "linkonce_odr"
	| "available_externally"
	| "appending"
	| "common"
	| "extern_weak"
	| "external"
;

// https://llvm.org/docs/LangRef.html#runtime-preemption-model

/*
void LLParser::ParseOptionalDSOLocal(bool &DSOLocal) {
*/

OptPreemptionSpecifier
	: empty
	| PreemptionSpecifier
;

PreemptionSpecifier
	: "dso_local"
	| "dso_preemptable"
;

// https://llvm.org/docs/LangRef.html#visibility-styles

/*
/// ParseOptionalVisibility
///   ::= empty
///   ::= 'default'
///   ::= 'hidden'
///   ::= 'protected'
///
void LLParser::ParseOptionalVisibility(unsigned &Res) {
*/

OptVisibility
	: empty
	| Visibility
;

Visibility
	: "default"
	| "hidden"
	| "protected"
;

// https://llvm.org/docs/LangRef.html#dll-storage-classes

/*
/// ParseOptionalDLLStorageClass
///   ::= empty
///   ::= 'dllimport'
///   ::= 'dllexport'
///
void LLParser::ParseOptionalDLLStorageClass(unsigned &Res) {
*/

OptDLLStorageClass
	: empty
	| DLLStorageClass
;

DLLStorageClass
	: "dllimport"
	| "dllexport"
;

/*
/// ParseOptionalThreadLocal
///   := empty
///   := 'thread_local'
///   := 'thread_local' '(' tlsmodel ')'
bool LLParser::ParseOptionalThreadLocal(GlobalVariable::ThreadLocalMode &TLM) {
*/

OptThreadLocal
	: empty
	| ThreadLocal
;

ThreadLocal
	: "thread_local"
	| "thread_local" "(" TLSModel ")"
;

/*
/// ParseTLSModel
///   := 'localdynamic'
///   := 'initialexec'
///   := 'localexec'
bool LLParser::ParseTLSModel(GlobalVariable::ThreadLocalMode &TLM) {
*/

TLSModel
	: "localdynamic"
	| "initialexec"
	| "localexec"
;

// --- [ Named Global Variable ] -----------------------------------------------

// https://llvm.org/docs/LangRef.html#global-variables

/*
/// ParseNamedGlobal:
///   GlobalVar '=' OptionalVisibility (ALIAS | IFUNC) ...
///   GlobalVar '=' OptionalLinkage OptionalPreemptionSpecifier
///                 OptionalVisibility OptionalDLLStorageClass
///                                                     ...   -> global variable
bool LLParser::ParseNamedGlobal() {
*/

NamedGlobal
	: GlobalVar "=" OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr Global
	| GlobalVar "=" OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr "alias" IndirectSymbol
	| GlobalVar "=" OptLinkage OptPreemptionSpecifier OptVisibility OptDLLStorageClass OptThreadLocal OptUnnamedAddr "ifunc" IndirectSymbol
;

// --- [ Comdat ] --------------------------------------------------------------

// https://llvm.org/docs/LangRef.html#langref-comdats

/*
bool LLParser::parseComdat() {
*/

Comdat
	: ComdatVar "=" "comdat" SelectionKind
;

SelectionKind
	: "any"
	| "exactmatch"
	| "largest"
	| "noduplicates"
	| "samesize"
;

// --- [ Named Metadata ] ------------------------------------------------------

// https://llvm.org/docs/LangRef.html#named-metadata

/*
/// ParseNamedMetadata:
///   !foo = !{ !1, !2 }
bool LLParser::ParseNamedMetadata() {
*/

NamedMetadata
	: MetadataVar "=" "!" "{" MDNodes "}"
;

MDNodes
	: empty
	| MDNodeList
;

MDNodeList
	: MDNode
	| MDNodeList "," MDNode
;

MDNode
	: MDNodeID
	// Parse DIExpressions inline as a special case. They are still MDNodes, so
	// they can still appear in named metadata. Remove this logic if they become
	// plain Metadata.
	| DIExpression
;

MDNodeID
	: MetadataID
;

// --- [ Standalone Metadata ] -------------------------------------------------

// https://llvm.org/docs/LangRef.html#metadata-nodes-and-metadata-strings

/*
/// ParseStandaloneMetadata:
///   !42 = !{...}
bool LLParser::ParseStandaloneMetadata() {
*/

StandaloneMetadata
	: MetadataID "=" OptDistinct MDTuple
	: MetadataID "=" OptDistinct SpecializedMDNode
;

OptDistinct
	: empty
	| "distinct"
;

MDTuple
	: "!" "{" "}"
;

// --- [ Indirect Symbol ] -----------------------------------------------------

// https://llvm.org/docs/LangRef.html#aliases
// https://llvm.org/docs/LangRef.html#ifuncs

/*
/// parseIndirectSymbol:
///   ::= GlobalVar '=' OptionalLinkage OptionalPreemptionSpecifier
///                     OptionalVisibility OptionalDLLStorageClass
///                     OptionalThreadLocal OptionalUnnamedAddr
//                      'alias|ifunc' IndirectSymbol
///
/// IndirectSymbol
///   ::= TypeAndValue
///
/// Everything through OptionalUnnamedAddr has already been parsed.
///
bool LLParser::parseIndirectSymbol(const std::string &Name, LocTy NameLoc,
*/

IndirectSymbol
	: Type "," GlobalTypeAndValue
	| Type "," IndirectCast ValID
;

IndirectCast
	: "bitcast"
	| "getelementptr"
	| "addrspacecast"
	| "inttoptr"
;

// --- [ Global Variable ] -----------------------------------------------------

// https://llvm.org/docs/LangRef.html#global-variables

/*
/// ParseGlobal
///   ::= GlobalVar '=' OptionalLinkage OptionalPreemptionSpecifier
///       OptionalVisibility OptionalDLLStorageClass
///       OptionalThreadLocal OptionalUnnamedAddr OptionalAddrSpace
///       OptionalExternallyInitialized GlobalType Type Const OptionalAttrs
///   ::= OptionalLinkage OptionalPreemptionSpecifier OptionalVisibility
///       OptionalDLLStorageClass OptionalThreadLocal OptionalUnnamedAddr
///       OptionalAddrSpace OptionalExternallyInitialized GlobalType Type
///       Const OptionalAttrs
///
/// Everything up to and including OptionalUnnamedAddr has been parsed
/// already.
///
bool LLParser::ParseGlobal(const std::string &Name, LocTy NameLoc,
*/

Global
	: OptAddrSpace OptExternallyInitialized GlobalType Type OptGlobalValue Attrs FnAttributeValuePairs
;

/*
/// ParseOptionalAddrSpace
///   := empty
///   := 'addrspace' '(' uint32 ')'
bool LLParser::ParseOptionalAddrSpace(unsigned &AddrSpace) {
*/

OptAddrSpace
	: empty
	| AddrSpace
;

AddrSpace
	: "addrspace" "(" int_lit ")"
;

OptExternallyInitialized
	: empty
	| "externally_initialized"
;

/*
/// ParseGlobalType
///   ::= 'constant'
///   ::= 'global'
bool LLParser::ParseGlobalType(bool &IsConstant) {
*/

GlobalType
	: "constant"
	| "global"
;

OptGlobalValue
	: empty
	| GlobalValue // absent if external linkage.
;

Attrs
	: empty
	| "," AttrList
;

AttrList
	: Attr
	| AttrList "," Attr
;

Attr
	: Section
	| Alignment
	| GlobalObjectMetadataAttachment
	| OptionalComdat
;

OptSection
	: empty
	| Section
;

Section
	: "section" string_lit
;

/*
/// ParseOptionalAlignment
///   ::= empty
///   ::= 'align' 4
bool LLParser::ParseOptionalAlignment(unsigned &Alignment) {
*/

OptAlignment
	: empty
	| Alignment
;

Alignment
	: "align" int_lit
;

/*
/// ParseFnAttributeValuePairs
///   ::= <attr> | <attr> '=' <value>
bool LLParser::ParseFnAttributeValuePairs(AttrBuilder &B,
*/

FnAttributeValuePairs
	: empty
	| FnAttributeValuePairList
;

FnAttributeValuePairList
	: FnAttributeValuePair
	| FnAttributeValuePairList FnAttributeValuePair
;

FnAttributeValuePair
	: "builtin"
	| AttrGrpID // not used in attribute groups.
	| string_lit
	| "align" "=" int_lit // used in attribute groups.
	| Alignment // used in functions.
	| "alignstack" "=" int_lit
	| StackAlignment
	| AllocSize
	| "alwaysinline"
	| "argmemonly"
	| "builtin"
	| "cold"
	| "convergent"
	| "inaccessiblememonly"
	| "inaccessiblemem_or_argmemonly"
	| "inlinehint"
	| "jumptable"
	| "minsize"
	| "naked"
	| "nobuiltin"
	| "noduplicate"
	| "noimplicitfloat"
	| "noinline"
	| "nonlazybind"
	| "noredzone"
	| "noreturn"
	| "norecurse"
	| "nounwind"
	| "optnone"
	| "optsize"
	| "readnone"
	| "readonly"
	| "returns_twice"
	| "speculatable"
	| "ssp"
	| "sspreq"
	| "sspstrong"
	| "safestack"
	| "sanitize_address"
	| "sanitize_hwaddress"
	| "sanitize_thread"
	| "sanitize_memory"
	| "strictfp"
	| "uwtable"
	| "writeonly"
;

/*
/// ParseOptionalStackAlignment
///   ::= empty
///   ::= 'alignstack' '(' 4 ')'
bool LLParser::ParseOptionalStackAlignment(unsigned &Alignment) {
*/
StackAlignment
	: "alignstack" "(" int_lit ")"
;

/*
bool LLParser::parseAllocSizeArguments(unsigned &BaseSizeArg,
*/

AllocSize
	: "allocsize" "(" int_lit ")"
	| "allocsize" "(" int_lit "," int_lit ")"
;

// --- [ Unnamed Attribute Group ] ---------------------------------------------

// https://llvm.org/docs/LangRef.html#attribute-groups

/*
/// ParseUnnamedAttrGrp
///   ::= 'attributes' AttrGrpID '=' '{' AttrValPair+ '}'
bool LLParser::ParseUnnamedAttrGrp() {
*/

UnnamedAttrGrp
	: "attributes" AttrGrpID "=" "{" FnAttributeValuePairList "}"
;

// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------
// --- [ foo ] -----------------------------------------------------------------

GlobalIdent
	: GlobalVar
	| GlobalID
;
