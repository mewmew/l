// === [ Types ] ===============================================================

// ref: ParseType
//
//  TYPEKEYWORD("void",      Type::getVoidTy(Context));
//  TYPEKEYWORD("half",      Type::getHalfTy(Context));
//  TYPEKEYWORD("float",     Type::getFloatTy(Context));
//  TYPEKEYWORD("double",    Type::getDoubleTy(Context));
//  TYPEKEYWORD("x86_fp80",  Type::getX86_FP80Ty(Context));
//  TYPEKEYWORD("fp128",     Type::getFP128Ty(Context));
//  TYPEKEYWORD("ppc_fp128", Type::getPPC_FP128Ty(Context));
//  TYPEKEYWORD("label",     Type::getLabelTy(Context));
//  TYPEKEYWORD("metadata",  Type::getMetadataTy(Context));
//  TYPEKEYWORD("x86_mmx",   Type::getX86_MMXTy(Context));
//  TYPEKEYWORD("token",     Type::getTokenTy(Context));

Type
	: VoidType
	// Types '(' ArgTypeListI ')' OptFuncAttrs
	| FuncType
	| FirstClassType
;

FirstClassType
	: ConcreteType
	| MetadataType
;

ConcreteType
	: IntType
	// Type ::= 'float' | 'void' (etc)
	| FloatType
	// Type ::= Type '*'
	// Type ::= Type 'addrspace' '(' uint32 ')' '*'
	| PointerType
	// Type ::= '<' ... '>'
	| VectorType
	| LabelType
	// Type ::= '[' ... ']'
	| ArrayType
	// Type ::= StructType
	| StructType
	// Type ::= %foo
	// Type ::= %4
	| NamedType
	| MMXType
	| TokenType
;

// --- [ Void Types ] ----------------------------------------------------------

VoidType
	: "void"
	<< &ast.VoidType{}, nil >>
;

// --- [ Function Types ] ------------------------------------------------------

// ref: ParseFunctionType
//
//  ::= Type ArgumentList OptionalAttrs

FuncType
	: Type "(" Params ")"
	<< &ast.FuncType{RetType: $0.(ast.Type), Params: $2.(*astx.Params).Params, Variadic: $2.(*astx.Params).Variadic}, nil >>
;

// --- [ Integer Types ] -------------------------------------------------------

IntType
	: int_type
	<< astx.NewIntType($0) >>
;

// --- [ Floating-point Types ] ------------------------------------------------

FloatType
	: FloatKind
	<< &ast.FloatType{Kind: $0.(ast.FloatKind)}, nil >>
;

FloatKind
	: "half"        << ast.FloatKindHalf, nil >>
	| "float"       << ast.FloatKindFloat, nil >>
	| "double"      << ast.FloatKindDouble, nil >>
	| "x86_fp80"    << ast.FloatKindX86_FP80, nil >>
	| "fp128"       << ast.FloatKindFP128, nil >>
	| "ppc_fp128"   << ast.FloatKindPPC_FP128, nil >>
;

// --- [ MMX Types ] -----------------------------------------------------------

MMXType
	: "x86_mmx"
	<< &ast.MMXType{}, nil >>
;

// --- [ Pointer Types ] -------------------------------------------------------

PointerType
	: Type OptAddrSpace "*"
	<< &ast.PointerType{ElemType: $0.(ast.Type), AddrSpace: $1.(ast.AddrSpace)}, nil >>
;

// --- [ Vector Types ] --------------------------------------------------------

// ref: ParseArrayVectorType
//
//     ::= '<' APSINTVAL 'x' Types '>'

VectorType
	: "<" int_lit "x" Type ">"
	<< &ast.VectorType{Len: astx.Int($1), ElemType: $3.(ast.Type)}, nil >>
;

// --- [ Label Types ] ---------------------------------------------------------

LabelType
	: "label"
	<< &ast.LabelType{}, nil >>
;

// --- [ Token Types ] ---------------------------------------------------------

TokenType
	: "token"
	<< &ast.TokenType{}, nil >>
;

// --- [ Metadata Types ] ------------------------------------------------------

MetadataType
	: "metadata"
	<< &ast.MetadataType{}, nil >>
;

// --- [ Array Types ] ---------------------------------------------------------

// ref: ParseArrayVectorType
//
//     ::= '[' APSINTVAL 'x' Types ']'

ArrayType
	: "[" int_lit "x" Type "]"
	<< &ast.ArrayType{Len: astx.Int($1), ElemType: $3.(ast.Type)}, nil >>
;

// --- [ Structure Types ] -----------------------------------------------------

// ref: ParseStructBody
//
//   StructType
//     ::= '{' '}'
//     ::= '{' Type (',' Type)* '}'
//     ::= '<' '{' '}' '>'
//     ::= '<' '{' Type (',' Type)* '}' '>'

// TODO: Simplify when parser generator is not limited by 1 token lookahead.
//
//    StructType
//       : "{" Types "}"
//       | "<" "{" Types "}" ">"
//    ;

StructType
	: "{" "}"
	<< &ast.StructType{}, nil >>
	| "{" TypeList "}"
	<< &ast.StructType{Fields: $1.([]ast.Type)}, nil >>
	| "<" "{" "}" ">"
	<< &ast.StructType{Packed: true}, nil >>
	| "<" "{" TypeList "}" ">"
	<< &ast.StructType{Packed: true, Fields: $2.([]ast.Type)}, nil >>
;

TypeList
	: Type
	<< []ast.Type{$0.(ast.Type)}, nil >>
	| TypeList "," Type
	<< append($0.([]ast.Type), $2.(ast.Type)), nil >>
;

// --- [ Named Types ] ---------------------------------------------------------

NamedType
	: LocalIdent
	<< &ast.NamedType{Name: $0.(*ast.LocalIdent)}, nil >>
;

