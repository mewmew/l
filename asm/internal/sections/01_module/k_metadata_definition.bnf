// ~~~ [ Named Metadata Definition ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#named-metadata

// ref: ParseNamedMetadata
//
//   !foo = !{ !1, !2 }

NamedMetadataDef
	: MetadataName "=" "!" "{" MetadataNodes "}"
	<< &metadata.NamedMetadataDef{Name: astx.MetadataName($0), Nodes: $4.([]metadata.MetadataNode)}, nil >>
;

MetadataNodes
	: empty
	<< ([]metadata.MetadataNode)(nil), nil >>
	| MetadataNodeList
;

MetadataNodeList
	: MetadataNode
	<< []metadata.MetadataNode{$0.(metadata.MetadataNode)}, nil >>
	| MetadataNodeList "," MetadataNode
	<< append($0.([]metadata.MetadataNode), $2.(metadata.MetadataNode)), nil >>
;

MetadataNode
	: MetadataID
	// Parse DIExpressions inline as a special case. They are still MDNodes, so
	// they can still appear in named metadata. Remove this logic if they become
	// plain Metadata.
	| DIExpression
;

// ~~~ [ Metadata Definition ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#metadata-nodes-and-metadata-strings

// ref: ParseStandaloneMetadata
//
//   !42 = !{...}

MetadataDef
	: MetadataID "=" OptDistinct MDTuple
	<< &metadata.MetadataDef{ID: astx.MetadataID($0), Distinct: $2.(bool), Node: $3.(metadata.MDNode)}, nil >>
	| MetadataID "=" OptDistinct SpecializedMDNode
	<< &metadata.MetadataDef{ID: astx.MetadataID($0), Distinct: $2.(bool), Node: $3.(metadata.MDNode)}, nil >>
;

OptDistinct
	: empty        << false, nil >>
	| "distinct"   << true, nil >>
;

