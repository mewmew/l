// === [ Constants ] ===========================================================

// https://llvm.org/docs/LangRef.html#constants

// ref: ParseValID

Constant
	: BoolConst
	| IntConst
	| FloatConst
	| NullConst
	| NoneConst
	| StructConst
	| ArrayConst
	| CharArrayConst
	| VectorConst
	| ZeroInitializerConst
	// @42
	// @foo
	| GlobalIdent
	| UndefConst
	| BlockAddressConst
	| ConstantExpr
;

// --- [ Boolean Constants ] ---------------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

BoolConst
	: BoolLit
	<< &constant.BoolConst{X: $0.(bool)}, nil >>
;

BoolLit
	: "true"    << true, nil >>
	| "false"   << false, nil >>
;

// --- [ Integer Constants ] ---------------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

IntConst
	: int_lit
	<< astx.NewIntConst($0) >>
;

IntLit
	: int_lit
	<< astx.Int($0), nil >>
;

// --- [ Floating-point Constants ] --------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

FloatConst
	: float_lit
	<< astx.NewFloatConst($0) >>
;

// --- [ Null Pointer Constants ] ----------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

NullConst
	: "null"
	<< &constant.NullConst{}, nil >>
;

// --- [ Token Constants ] -----------------------------------------------------

// https://llvm.org/docs/LangRef.html#simple-constants

// ref: ParseValID

NoneConst
	: "none"
	<< &constant.NoneConst{}, nil >>
;

// --- [ Structure Constants ] -------------------------------------------------

// https://llvm.org/docs/LangRef.html#complex-constants

// ref: ParseValID
//
//  ::= '{' ConstVector '}'
//  ::= '<' '{' ConstVector '}' '>' --> Packed Struct.

// TODO: Simplify when parser generator is not limited by 1 token lookahead.
//
//    StructConst
//       : "{" Elems "}"
//       | "<" "{" Elems "}" ">"
//    ;

StructConst
	: "{" "}"
	<< &constant.StructConst{}, nil >>
	| "{" TypeConstList "}"
	<< &constant.StructConst{Fields: $1.([]ir.Constant)}, nil >>
	| "<" "{" "}" ">"
	<< &constant.StructConst{Packed: true}, nil >>
	| "<" "{" TypeConstList "}" ">"
	<< &constant.StructConst{Packed: true, Fields: $2.([]ir.Constant)}, nil >>
;

// --- [ Array Constants ] -----------------------------------------------------

// https://llvm.org/docs/LangRef.html#complex-constants

// ref: ParseValID
//
//  c "foo"

ArrayConst
	: "[" TypeConsts "]"
	<< &constant.ArrayConst{Elems: $1.([]ir.Constant)}, nil >>
;

CharArrayConst
	: "c" StringLit
	<< &constant.CharArrayConst{Value: $1.(string)}, nil >>
;

StringLit
	: string_lit
	<< astx.UnquoteString($0), nil >>
;

// --- [ Vector Constants ] ----------------------------------------------------

// https://llvm.org/docs/LangRef.html#complex-constants

// ref: ParseValID
//
//  ::= '<' ConstVector '>'         --> Vector.

VectorConst
	: "<" TypeConsts ">"
	<< &constant.VectorConst{Elems: $1.([]ir.Constant)}, nil >>
;

// --- [ Zero Initialization Constants ] ---------------------------------------

// https://llvm.org/docs/LangRef.html#complex-constants

// ref: ParseValID

ZeroInitializerConst
	: "zeroinitializer"
	<< &constant.ZeroInitializerConst{}, nil >>
;

// --- [ Undefined Values ] ----------------------------------------------------

// https://llvm.org/docs/LangRef.html#undefined-values

// ref: ParseValID

UndefConst
	: "undef"
	<< &constant.UndefConst{}, nil >>
;

// --- [ Addresses of Basic Blocks ] -------------------------------------------

// https://llvm.org/docs/LangRef.html#addresses-of-basic-blocks

// ref: ParseValID
//
//  ::= 'blockaddress' '(' @foo ',' %bar ')'

BlockAddressConst
	: "blockaddress" "(" GlobalIdent "," LocalIdent ")"
	<< &constant.BlockAddressConst{Func: &ir.Function{Name: $2.(*ast.GlobalIdent).Name}, Block: &ir.BasicBlock{Name: $4.(*ast.LocalIdent).Name}}, nil >>
;

