// ### [ Helper productions ] ##################################################

TypeValues
	: empty
	<< ([]value.Value)(nil), nil >>
	| TypeValueList
;

TypeValueList
	: TypeValue
	<< []value.Value{$0.(*ast.TypeValue)}, nil >>
	| TypeValueList TypeValue
	<< append($0.([]value.Value), $1.(*ast.TypeValue)), nil >>
;

CommaSepTypeValueList
	: TypeValue
	<< []value.Value{$0.(*ast.TypeValue)}, nil >>
	| CommaSepTypeValueList "," TypeValue
	<< append($0.([]value.Value), $2.(*ast.TypeValue)), nil >>
;

TypeValue
	: Type Value
	<< astx.TypeValue($0, $1), nil >>
;

TypeConsts
	: empty
	<< ([]ir.Constant)(nil), nil >>
	| TypeConstList
;

TypeConstList
	: TypeConst
	<< []ir.Constant{$0.(*ast.TypeConst)}, nil >>
	| TypeConstList "," TypeConst
	<< append($0.([]ir.Constant), $2.(*ast.TypeConst)), nil >>
;

TypeConst
	: Type Constant
	<< &ast.TypeConst{Typ: $0.(types.Type), Const: $1.(ir.Constant)}, nil >>
;

// ref: ParseOptionalAlignment
//
//   ::= empty
//   ::= 'align' 4

Alignment
	: "align" int_lit
	<< &ir.Alignment{Align: astx.Int($1)}, nil >>
;

// ref: parseAllocSizeArguments

AllocSize
	: "allocsize" "(" int_lit ")"
	<< &ir.AllocSize{BaseSize: astx.Int($2)}, nil >>
	| "allocsize" "(" int_lit "," int_lit ")"
	<< &ir.AllocSize{BaseSize: astx.Int($2), N: astx.Int($4)}, nil >>
;

// ref: ParseParameterList
//
//    ::= '(' ')'
//    ::= '(' Arg (',' Arg)* ')'
//  Arg
//    ::= Type OptionalAttributes Value OptionalAttributes

Args
	: empty
	<< ([]ir.Argument)(nil), nil >>
	| "..."
	<< ([]ir.Argument)(nil), nil >>
	| ArgList
	<< $0, nil >>
	| ArgList "," "..."
	<< $0, nil >>
;

ArgList
	: Arg
	<< []ir.Argument{$0.(ir.Argument)}, nil >>
	| ArgList "," Arg
	<< append($0.([]ir.Argument), $2.(ir.Argument)), nil >>
;

// ref: ParseMetadataAsValue
//
//  ::= metadata i32 %local
//  ::= metadata i32 @global
//  ::= metadata i32 7
//  ::= metadata !0
//  ::= metadata !{...}
//  ::= metadata !"string"

Arg
	: ConcreteType ParamAttrs Value
	<< &ir.Arg{X: astx.TypeValue($0, $2), ParamAttrs: $1.([]ir.ParamAttribute)}, nil >>
	| MetadataType Metadata
	<< &ast.MetadataValue{Metadata: $1.(metadata.Metadata)}, nil >>
;

// ref: ParseOrdering
//
//   ::= AtomicOrdering

AtomicOrdering
	: "acq_rel"     << ir.AtomicOrderingAcqRel, nil >>
	| "acquire"     << ir.AtomicOrderingAcquire, nil >>
	| "monotonic"   << ir.AtomicOrderingMonotonic, nil >>
	| "release"     << ir.AtomicOrderingRelease, nil >>
	| "seq_cst"     << ir.AtomicOrderingSeqCst, nil >>
	| "unordered"   << ir.AtomicOrderingUnordered, nil >>
;

// ref: ParseOptionalCallingConv
//
//   ::= empty
//   ::= 'ccc'
//   ::= 'fastcc'
//   ::= 'intel_ocl_bicc'
//   ::= 'coldcc'
//   ::= 'x86_stdcallcc'
//   ::= 'x86_fastcallcc'
//   ::= 'x86_thiscallcc'
//   ::= 'x86_vectorcallcc'
//   ::= 'arm_apcscc'
//   ::= 'arm_aapcscc'
//   ::= 'arm_aapcs_vfpcc'
//   ::= 'msp430_intrcc'
//   ::= 'avr_intrcc'
//   ::= 'avr_signalcc'
//   ::= 'ptx_kernel'
//   ::= 'ptx_device'
//   ::= 'spir_func'
//   ::= 'spir_kernel'
//   ::= 'x86_64_sysvcc'
//   ::= 'win64cc'
//   ::= 'webkit_jscc'
//   ::= 'anyregcc'
//   ::= 'preserve_mostcc'
//   ::= 'preserve_allcc'
//   ::= 'ghccc'
//   ::= 'swiftcc'
//   ::= 'x86_intrcc'
//   ::= 'hhvmcc'
//   ::= 'hhvm_ccc'
//   ::= 'cxx_fast_tlscc'
//   ::= 'amdgpu_vs'
//   ::= 'amdgpu_ls'
//   ::= 'amdgpu_hs'
//   ::= 'amdgpu_es'
//   ::= 'amdgpu_gs'
//   ::= 'amdgpu_ps'
//   ::= 'amdgpu_cs'
//   ::= 'amdgpu_kernel'
//   ::= 'cc' UINT

OptCallingConv
	: empty         << ir.CallingConvNone, nil >>
	| CallingConv
;

CallingConv
	: "amdgpu_cs"          << ir.CallingConvAmdGPUCS, nil >>
	| "amdgpu_es"          << ir.CallingConvAmdGPUES, nil >>
	| "amdgpu_gs"          << ir.CallingConvAmdGPUGS, nil >>
	| "amdgpu_hs"          << ir.CallingConvAmdGPUHS, nil >>
	| "amdgpu_kernel"      << ir.CallingConvAmdGPUKernel, nil >>
	| "amdgpu_ls"          << ir.CallingConvAmdGPULS, nil >>
	| "amdgpu_ps"          << ir.CallingConvAmdGPUPS, nil >>
	| "amdgpu_vs"          << ir.CallingConvAmdGPUVS, nil >>
	| "anyregcc"           << ir.CallingConvAnyReg, nil >>
	| "arm_aapcs_vfpcc"    << ir.CallingConvARMAAPCSVFP, nil >>
	| "arm_aapcscc"        << ir.CallingConvARMAAPCS, nil >>
	| "arm_apcscc"         << ir.CallingConvARMAPCS, nil >>
	| "avr_intrcc"         << ir.CallingConvAVRIntr, nil >>
	| "avr_signalcc"       << ir.CallingConvAVRSignal, nil >>
	| "ccc"                << ir.CallingConvC, nil >>
	| "coldcc"             << ir.CallingConvCold, nil >>
	| "cxx_fast_tlscc"     << ir.CallingConvCXXFastTLS, nil >>
	| "fastcc"             << ir.CallingConvFast, nil >>
	| "ghccc"              << ir.CallingConvGHC, nil >>
	| "hhvm_ccc"           << ir.CallingConvHHVMC, nil >>
	| "hhvmcc"             << ir.CallingConvHHVM, nil >>
	| "intel_ocl_bicc"     << ir.CallingConvIntelOCLBI, nil >>
	| "msp430_intrcc"      << ir.CallingConvMSP430Intr, nil >>
	| "preserve_allcc"     << ir.CallingConvPreserveAll, nil >>
	| "preserve_mostcc"    << ir.CallingConvPreserveMost, nil >>
	| "ptx_device"         << ir.CallingConvPTXDevice, nil >>
	| "ptx_kernel"         << ir.CallingConvPTXKernel, nil >>
	| "spir_func"          << ir.CallingConvSPIRFunc, nil >>
	| "spir_kernel"        << ir.CallingConvSPIRKernel, nil >>
	| "swiftcc"            << ir.CallingConvSwift, nil >>
	| "webkit_jscc"        << ir.CallingConvWebKitJS, nil >>
	| "win64cc"            << ir.CallingConvWin64, nil >>
	| "x86_64_sysvcc"      << ir.CallingConvX86_64SysV, nil >>
	| "x86_fastcallcc"     << ir.CallingConvX86FastCall, nil >>
	| "x86_intrcc"         << ir.CallingConvX86Intr, nil >>
	| "x86_regcallcc"      << ir.CallingConvX86RegCall, nil >>
	| "x86_stdcallcc"      << ir.CallingConvX86StdCall, nil >>
	| "x86_thiscallcc"     << ir.CallingConvX86ThisCall, nil >>
	| "x86_vectorcallcc"   << ir.CallingConvX86VectorCall, nil >>
	| "cc" int_lit         << astx.NewCallingConv($1) >>
;

// ref: parseOptionalComdat

OptComdat
	: empty
	<< (*ir.Comdat)(nil), nil >>
	| Comdat
;

Comdat
	: "comdat"
	<< &ir.Comdat{}, nil >>
	| "comdat" "(" ComdatName ")"
	<< &ir.Comdat{Name: astx.ComdatName($2)}, nil >>
;

Dereferenceable
	: "dereferenceable" "(" int_lit ")"
	<< &ir.Dereferenceable{N: astx.Int($2)}, nil >>
	| "dereferenceable_or_null" "(" int_lit ")"
	<< &ir.Dereferenceable{N: astx.Int($2), Null: true}, nil >>
;

// https://llvm.org/docs/LangRef.html#dll-storage-classes

// ref: ParseOptionalDLLStorageClass
//
//   ::= empty
//   ::= 'dllimport'
//   ::= 'dllexport'

OptDLLStorageClass
	: empty             << ir.DLLStorageClassNone, nil >>
	| DLLStorageClass
;

DLLStorageClass
	: "dllexport"   << ir.DLLStorageClassDLLExport, nil >>
	| "dllimport"   << ir.DLLStorageClassDLLImport, nil >>
;

OptExact
	: empty     << false, nil >>
	| "exact"   << true, nil >>
;

// ref: ParseExceptionArgs

ExceptionArgs
	: empty
	<< ([]ir.Argument)(nil), nil >>
	| ExceptionArgList
;

ExceptionArgList
	: ExceptionArg
	<< []ir.Argument{$0.(ir.Argument)}, nil >>
	| ExceptionArgList "," ExceptionArg
	<< append($0.([]ir.Argument), $2.(ir.Argument)), nil >>
;

ExceptionArg
	: ConcreteType Value
	<< astx.TypeValue($0, $1), nil >>
	| MetadataType Metadata
	<< &ast.MetadataValue{Metadata: $1.(metadata.Metadata)}, nil >>
;

ExceptionScope
	: NoneConst
	| LocalIdent
;

// ref: EatFastMathFlagsIfPresent

FastMathFlags
	: empty
	<< ([]ir.FastMathFlag)(nil), nil >>
	| FastMathFlagList
;

FastMathFlagList
	: FastMathFlag
	<< []ir.FastMathFlag{$0.(ir.FastMathFlag)}, nil >>
	| FastMathFlagList FastMathFlag
	<< append($0.([]ir.FastMathFlag), $1.(ir.FastMathFlag)), nil >>
;

FastMathFlag
	: "afn"        << ir.FastMathFlagAFn, nil >>
	| "arcp"       << ir.FastMathFlagARcp, nil >>
	| "contract"   << ir.FastMathFlagContract, nil >>
	| "fast"       << ir.FastMathFlagFast, nil >>
	| "ninf"       << ir.FastMathFlagNInf, nil >>
	| "nnan"       << ir.FastMathFlagNNaN, nil >>
	| "nsz"        << ir.FastMathFlagNSZ, nil >>
	| "reassoc"    << ir.FastMathFlagReassoc, nil >>
;

// ref: ParseCmpPredicate

FPred
	: "false"   << ir.FPredFalse, nil >>
	| "oeq"     << ir.FPredOEQ, nil >>
	| "oge"     << ir.FPredOGE, nil >>
	| "ogt"     << ir.FPredOGT, nil >>
	| "ole"     << ir.FPredOLE, nil >>
	| "olt"     << ir.FPredOLT, nil >>
	| "one"     << ir.FPredONE, nil >>
	| "ord"     << ir.FPredORD, nil >>
	| "true"    << ir.FPredTrue, nil >>
	| "ueq"     << ir.FPredUEQ, nil >>
	| "uge"     << ir.FPredUGE, nil >>
	| "ugt"     << ir.FPredUGT, nil >>
	| "ule"     << ir.FPredULE, nil >>
	| "ult"     << ir.FPredULT, nil >>
	| "une"     << ir.FPredUNE, nil >>
	| "uno"     << ir.FPredUNO, nil >>
;

// ___ [ Function Attribute ] __________________________________________________

// ref: ParseFnAttributeValuePairs
//
//   ::= <attr> | <attr> '=' <value>

FuncAttrs
	: empty
	<< ([]ir.FuncAttribute)(nil), nil >>
	| FuncAttrList
;

FuncAttrList
	: FuncAttr
	<< []ir.FuncAttribute{$0.(ir.FuncAttribute)}, nil >>
	| FuncAttrList FuncAttr
	<< append($0.([]ir.FuncAttribute), $1.(ir.FuncAttribute)), nil >>
;

FuncAttr
	// not used in attribute groups.
	: AttrGroupID
	// used in attribute groups.
	| "align" "=" int_lit               << &ir.Alignment{Align: astx.Int($2)}, nil >>
	| "alignstack" "=" int_lit          << &ir.StackAlignment{Align: astx.Int($2)}, nil >>
	// used in functions.
	| Alignment
	| AllocSize
	| StackAlignment
	| AttrString
	| AttrPair
	| "alwaysinline"                    << ir.FuncAttrAlwaysInline, nil >>
	| "argmemonly"                      << ir.FuncAttrArgMemOnly, nil >>
	| "builtin"                         << ir.FuncAttrBuiltin, nil >>
	| "cold"                            << ir.FuncAttrCold, nil >>
	| "convergent"                      << ir.FuncAttrConvergent, nil >>
	| "inaccessiblemem_or_argmemonly"   << ir.FuncAttrInaccessibleMemOrArgMemOnly, nil >>
	| "inaccessiblememonly"             << ir.FuncAttrInaccessibleMemOnly, nil >>
	| "inlinehint"                      << ir.FuncAttrInlineHint, nil >>
	| "jumptable"                       << ir.FuncAttrJumpTable, nil >>
	| "minsize"                         << ir.FuncAttrMinSize, nil >>
	| "naked"                           << ir.FuncAttrNaked, nil >>
	| "nobuiltin"                       << ir.FuncAttrNoBuiltin, nil >>
	| "noduplicate"                     << ir.FuncAttrNoDuplicate, nil >>
	| "noimplicitfloat"                 << ir.FuncAttrNoImplicitFloat, nil >>
	| "noinline"                        << ir.FuncAttrNoInline, nil >>
	| "nonlazybind"                     << ir.FuncAttrNonLazyBind, nil >>
	| "norecurse"                       << ir.FuncAttrNoRecurse, nil >>
	| "noredzone"                       << ir.FuncAttrNoRedZone, nil >>
	| "noreturn"                        << ir.FuncAttrNoReturn, nil >>
	| "nounwind"                        << ir.FuncAttrNoUnwind, nil >>
	| "optnone"                         << ir.FuncAttrOptNone, nil >>
	| "optsize"                         << ir.FuncAttrOptSize, nil >>
	| "readnone"                        << ir.FuncAttrReadNone, nil >>
	| "readonly"                        << ir.FuncAttrReadOnly, nil >>
	| "returns_twice"                   << ir.FuncAttrReturnsTwice, nil >>
	| "safestack"                       << ir.FuncAttrSafeStack, nil >>
	| "sanitize_address"                << ir.FuncAttrSanitizeAddress, nil >>
	| "sanitize_hwaddress"              << ir.FuncAttrSanitizeHWAddress, nil >>
	| "sanitize_memory"                 << ir.FuncAttrSanitizeMemory, nil >>
	| "sanitize_thread"                 << ir.FuncAttrSanitizeThread, nil >>
	| "speculatable"                    << ir.FuncAttrSpeculatable, nil >>
	| "ssp"                             << ir.FuncAttrSSP, nil >>
	| "sspreq"                          << ir.FuncAttrSSPReq, nil >>
	| "sspstrong"                       << ir.FuncAttrSSPStrong, nil >>
	| "strictfp"                        << ir.FuncAttrStrictFP, nil >>
	| "uwtable"                         << ir.FuncAttrUwtable, nil >>
	| "writeonly"                       << ir.FuncAttrWriteOnly, nil >>
;

AttrString
	: StringLit   << &ir.AttrString{Value: $0.(string)}, nil >>
;

AttrPair
	: StringLit "=" StringLit   << &ir.AttrPair{Key: $0.(string), Value: $2.(string)}, nil >>
;

OptInBounds
	: empty        << false, nil >>
	| "inbounds"   << true, nil >>
;

// ref: ParseIndexList
//
//    ::=  (',' uint32)+

Indices
	: empty
	<< ([]int64)(nil), nil >>
	| "," IndexList
	<< $1, nil >>
;

IndexList
	: Index
	<< []int64{$0.(int64)}, nil >>
	| IndexList "," Index
	<< append($0.([]int64), $2.(int64)), nil >>
;

Index
	: int_lit
	<< astx.Int($0), nil >>
;

// ref: ParseCmpPredicate

IPred
	: "eq"    << ir.IPredEQ, nil >>
	| "ne"    << ir.IPredNE, nil >>
	| "sge"   << ir.IPredSGE, nil >>
	| "sgt"   << ir.IPredSGT, nil >>
	| "sle"   << ir.IPredSLE, nil >>
	| "slt"   << ir.IPredSLT, nil >>
	| "uge"   << ir.IPredUGE, nil >>
	| "ugt"   << ir.IPredUGT, nil >>
	| "ule"   << ir.IPredULE, nil >>
	| "ult"   << ir.IPredULT, nil >>
;

// https://llvm.org/docs/LangRef.html#linkage-types

// ref: ParseOptionalLinkage
//
//   ::= empty
//   ::= 'private'
//   ::= 'internal'
//   ::= 'weak'
//   ::= 'weak_odr'
//   ::= 'linkonce'
//   ::= 'linkonce_odr'
//   ::= 'available_externally'
//   ::= 'appending'
//   ::= 'common'
//   ::= 'extern_weak'
//   ::= 'external'

OptLinkage
	: empty     << ir.LinkageNone, nil >>
	| Linkage
;

Linkage
	: "appending"              << ir.LinkageAppending, nil >>
	| "available_externally"   << ir.LinkageAvailableExternally, nil >>
	| "common"                 << ir.LinkageCommon, nil >>
	| "internal"               << ir.LinkageInternal, nil >>
	| "linkonce"               << ir.LinkageLinkOnce, nil >>
	| "linkonce_odr"           << ir.LinkageLinkOnceODR, nil >>
	| "private"                << ir.LinkagePrivate, nil >>
	| "weak"                   << ir.LinkageWeak, nil >>
	| "weak_odr"               << ir.LinkageWeakODR, nil >>
;

OptExternLinkage
	: empty           << ir.LinkageNone, nil >>
	| ExternLinkage
;

ExternLinkage
	: "extern_weak"   << ir.LinkageExternWeak, nil >>
	| "external"      << ir.LinkageExternal, nil >>
;

// ref: ParseOptionalOperandBundles
//
//    ::= empty
//    ::= '[' OperandBundle [, OperandBundle ]* ']'
//
//  OperandBundle
//    ::= bundle-tag '(' ')'
//    ::= bundle-tag '(' Type Value [, Type Value ]* ')'
//
//  bundle-tag ::= String Constant

OperandBundles
	: empty
	<< ([]*ir.OperandBundle)(nil), nil >>
	| "[" OperandBundleList "]"
	<< $1, nil >>
;

OperandBundleList
	: OperandBundle
	<< []*ir.OperandBundle{$0.(*ir.OperandBundle)}, nil >>
	| OperandBundleList OperandBundle
	<< append($0.([]*ir.OperandBundle), $1.(*ir.OperandBundle)), nil >>
;

OperandBundle
	: StringLit "(" TypeValues ")"
	<< &ir.OperandBundle{Tag: $0.(string), Inputs: $2.([]value.Value)}, nil >>
;

OverflowFlags
	: empty
	<< ([]ir.OverflowFlag)(nil), nil >>
	| OverflowFlagList
;

OverflowFlagList
	: OverflowFlag
	<< []ir.OverflowFlag{$0.(ir.OverflowFlag)}, nil >>
	| OverflowFlagList OverflowFlag
	<< append($0.([]ir.OverflowFlag), $1.(ir.OverflowFlag)), nil >>
;

OverflowFlag
	: "nsw"   << ir.OverflowFlagNSW, nil >>
	| "nuw"   << ir.OverflowFlagNUW, nil >>
;

// ___ [ Parameter Attribute ] _________________________________________________

// ref: ParseOptionalParamAttrs

ParamAttrs
	: empty
	<< ([]ir.ParamAttribute)(nil), nil >>
	| ParamAttrList
;

ParamAttrList
	: ParamAttr
	<< []ir.ParamAttribute{$0.(ir.ParamAttribute)}, nil >>
	| ParamAttrList ParamAttr
	<< append($0.([]ir.ParamAttribute), $1.(ir.ParamAttribute)), nil >>
;

// ref: ParseOptionalDerefAttrBytes
//
//   ::= empty
//   ::= AttrKind '(' 4 ')'

ParamAttr
	: Alignment
	| Dereferenceable
	| AttrString
	| AttrPair
	| "byval"           << ir.ParamAttrByval, nil >>
	| "inalloca"        << ir.ParamAttrInAlloca, nil >>
	| "inreg"           << ir.ParamAttrInReg, nil >>
	| "nest"            << ir.ParamAttrNest, nil >>
	| "noalias"         << ir.ParamAttrNoAlias, nil >>
	| "nocapture"       << ir.ParamAttrNoCapture, nil >>
	| "nonnull"         << ir.ParamAttrNonNull, nil >>
	| "readnone"        << ir.ParamAttrReadNone, nil >>
	| "readonly"        << ir.ParamAttrReadOnly, nil >>
	| "returned"        << ir.ParamAttrReturned, nil >>
	| "signext"         << ir.ParamAttrSignExt, nil >>
	| "sret"            << ir.ParamAttrSRet, nil >>
	| "swifterror"      << ir.ParamAttrSwiftError, nil >>
	| "swiftself"       << ir.ParamAttrSwiftSelf, nil >>
	| "writeonly"       << ir.ParamAttrWriteOnly, nil >>
	| "zeroext"         << ir.ParamAttrZeroExt, nil >>
;

// ref: ParseArgumentList
//
//   ::= '(' ArgTypeListI ')'
//  ArgTypeListI
//   ::= empty
//   ::= '...'
//   ::= ArgTypeList ',' '...'
//   ::= ArgType (',' ArgType)*

Params
	: empty
	<< &astx.Params{}, nil >>
	| "..."
	<< &astx.Params{Variadic: true}, nil >>
	| ParamList
	<< &astx.Params{Params: $0.([]*ir.Param)}, nil >>
	| ParamList "," "..."
	<< &astx.Params{Params: $0.([]*ir.Param), Variadic: true}, nil >>
;

ParamList
	: Param
	<< []*ir.Param{$0.(*ir.Param)}, nil >>
	| ParamList "," Param
	<< append($0.([]*ir.Param), $2.(*ir.Param)), nil >>
;

Param
	: Type ParamAttrs
	<< &ir.Param{Typ: $0.(types.Type), Attrs: $1.([]ir.ParamAttribute)}, nil >>
	| Type ParamAttrs LocalIdent
	<< &ir.Param{Typ: $0.(types.Type), Name: astx.LocalIdent($2), Attrs: $1.([]ir.ParamAttribute)}, nil >>
;

// https://llvm.org/docs/LangRef.html#runtime-preemption-model

// ref: ParseOptionalDSOLocal

OptPreemptionSpecifier
	: empty                 << ir.PreemptionNone, nil >>
	| PreemptionSpecifier
;

PreemptionSpecifier
	: "dso_local"         << ir.PreemptionDSOLocal, nil >>
	| "dso_preemptable"   << ir.PreemptionDSOPreemptable, nil >>
;

// ___ [ Return Attribute ] __________________________________________________

// ref: ParseOptionalReturnAttrs

ReturnAttrs
	: empty
	<< ([]ir.ReturnAttribute)(nil), nil >>
	| ReturnAttrList
;

ReturnAttrList
	: ReturnAttr
	<< []ir.ReturnAttribute{$0.(ir.ReturnAttribute)}, nil >>
	| ReturnAttrList ReturnAttr
	<< append($0.([]ir.ReturnAttribute), $1.(ir.ReturnAttribute)), nil >>
;

ReturnAttr
	: Alignment
	| Dereferenceable
	| AttrString
	| AttrPair
	| "inreg"           << ir.ReturnAttrInReg, nil >>
	| "noalias"         << ir.ReturnAttrNoAlias, nil >>
	| "nonnull"         << ir.ReturnAttrNonNull, nil >>
	| "signext"         << ir.ReturnAttrSignExt, nil >>
	| "zeroext"         << ir.ReturnAttrZeroExt, nil >>
;

OptSection
	: empty
	<< (*ir.Section)(nil), nil >>
	| Section
;

Section
	: "section" StringLit
	<< &ir.Section{Name: $1.(string)}, nil >>
;

// ref: ParseOptionalStackAlignment
//
//   ::= empty
//   ::= 'alignstack' '(' 4 ')'
StackAlignment
	: "alignstack" "(" int_lit ")"
	<< &ir.StackAlignment{Align: astx.Int($2)}, nil >>
;

// ref: ParseScope
//
//   ::= syncscope("singlethread" | "<target scope>")?

OptSyncScope
	: empty
	<< (*ir.SyncScope)(nil), nil >>
	| "syncscope" "(" StringLit ")"
	<< &ir.SyncScope{Scope: $2.(string)}, nil >>
;

// ref: ParseOptionalThreadLocal
//
//   := empty
//   := 'thread_local'
//   := 'thread_local' '(' tlsmodel ')'

OptThreadLocal
	: empty
	<< (*ir.ThreadLocal)(nil), nil >>
	| ThreadLocal
;

ThreadLocal
	: "thread_local"
	<< &ir.ThreadLocal{}, nil >>
	| "thread_local" "(" TLSModel ")"
	<< &ir.ThreadLocal{Model: $2.(ir.TLSModel)}, nil >>
;

// ref: ParseTLSModel
//
//   := 'localdynamic'
//   := 'initialexec'
//   := 'localexec'

TLSModel
	: "initialexec"    << ir.TLSModelInitialExec, nil >>
	| "localdynamic"   << ir.TLSModelLocalDynamic, nil >>
	| "localexec"      << ir.TLSModelLocalExec, nil >>
;

// ref: ParseOptionalUnnamedAddr

OptUnnamedAddr
	: empty         << ir.UnnamedAddrNone, nil >>
	| UnnamedAddr
;

UnnamedAddr
	: "local_unnamed_addr"   << ir.UnnamedAddrLocalUnnamedAddr, nil >>
	| "unnamed_addr"         << ir.UnnamedAddrUnnamedAddr, nil >>
;

// https://llvm.org/docs/LangRef.html#visibility-styles

// ref: ParseOptionalVisibility
//
//   ::= empty
//   ::= 'default'
//   ::= 'hidden'
//   ::= 'protected'

OptVisibility
	: empty        << ir.VisibilityNone, nil >>
	| Visibility
;

Visibility
	: "default"     << ir.VisibilityDefault, nil >>
	| "hidden"      << ir.VisibilityHidden, nil >>
	| "protected"   << ir.VisibilityProtected, nil >>
;

OptVolatile
	: empty        << false, nil >>
	| "volatile"   << true, nil >>
;

