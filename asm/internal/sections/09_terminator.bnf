// === [ Terminators ] =========================================================

// https://llvm.org/docs/LangRef.html#terminator-instructions

// ref: ParseInstruction

Terminator
	: RetTerm
	| BrTerm
	| CondBrTerm
	| SwitchTerm
	| IndirectBrTerm
	| InvokeTerm
	| ResumeTerm
	| CatchSwitchTerm
	| CatchRetTerm
	| CleanupRetTerm
	| UnreachableTerm
;

// --- [ ret ] -----------------------------------------------------------------

// https://llvm.org/docs/LangRef.html#ret-instruction

// ref: ParseRet
//
//   ::= 'ret' void (',' !dbg, !1)*
//   ::= 'ret' TypeAndValue (',' !dbg, !1)*

RetTerm
	// Void return.
	: "ret" VoidType OptCommaSepMetadataAttachmentList
	<< &ir.TermRet{Metadata: $2.([]*metadata.MetadataAttachment)}, nil >>
	// Value return.
	| "ret" ConcreteType Value OptCommaSepMetadataAttachmentList
	<< &ir.TermRet{X: astx.TypeValue($1, $2), Metadata: $3.([]*metadata.MetadataAttachment)}, nil >>
;

// --- [ br ] ------------------------------------------------------------------

// https://llvm.org/docs/LangRef.html#br-instruction

// ref: ParseBr
//
//   ::= 'br' TypeAndValue
//   ::= 'br' TypeAndValue ',' TypeAndValue ',' TypeAndValue

// Unconditional branch.
BrTerm
	: "br" LabelType LocalIdent OptCommaSepMetadataAttachmentList
	<< &ir.TermBr{Target: astx.Label($1, $2), Metadata: $3.([]*metadata.MetadataAttachment)}, nil >>
;

// Conditional branch.
CondBrTerm
	: "br" IntType Value "," LabelType LocalIdent "," LabelType LocalIdent OptCommaSepMetadataAttachmentList
	<< &ir.TermCondBr{Cond: astx.TypeValue($1, $2), TargetTrue: astx.Label($4, $5), TargetFalse: astx.Label($7, $8), Metadata: $9.([]*metadata.MetadataAttachment)}, nil >>
;

// --- [ switch ] --------------------------------------------------------------

// https://llvm.org/docs/LangRef.html#switch-instruction

// ref: ParseSwitch
//
//    ::= 'switch' TypeAndValue ',' TypeAndValue '[' JumpTable ']'
//  JumpTable
//    ::= (TypeAndValue ',' TypeAndValue)*

SwitchTerm
	: "switch" Type Value "," LabelType LocalIdent "[" Cases "]" OptCommaSepMetadataAttachmentList
	<< &ir.TermSwitch{X: astx.TypeValue($1, $2), Default: astx.Label($4, $5), Cases: $7.([]*ir.Case), Metadata: $9.([]*metadata.MetadataAttachment)}, nil >>
;

Cases
	: empty
	<< ([]*ir.Case)(nil), nil >>
	| CaseList
;

CaseList
	: Case
	<< []*ir.Case{$0.(*ir.Case)}, nil >>
	| CaseList Case
	<< append($0.([]*ir.Case), $1.(*ir.Case)), nil >>
;

Case
	: Type IntConst "," LabelType LocalIdent
	<< &ir.Case{X: astx.TypeConst($0, $1), Target: astx.Label($3, $4)}, nil >>
;

// --- [ indirectbr ] ----------------------------------------------------------

// https://llvm.org/docs/LangRef.html#indirectbr-instruction

// ref: ParseIndirectBr
//
//    ::= 'indirectbr' TypeAndValue ',' '[' LabelList ']'

IndirectBrTerm
	: "indirectbr" Type Value "," "[" LabelList "]" OptCommaSepMetadataAttachmentList
	<< &ir.TermIndirectBr{Addr: astx.TypeValue($1, $2), Targets: $5.([]*ir.BasicBlock), Metadata: $7.([]*metadata.MetadataAttachment)}, nil >>
;

LabelList
	: Label
	<< []*ir.BasicBlock{$0.(*ir.BasicBlock)}, nil >>
	| LabelList "," Label
	<< append($0.([]*ir.BasicBlock), $2.(*ir.BasicBlock)), nil >>
;

Label
	: LabelType LocalIdent
	<< astx.Label($0, $1), nil >>
;

// --- [ invoke ] --------------------------------------------------------------

// https://llvm.org/docs/LangRef.html#invoke-instruction

// ref: ParseInvoke
//
//   ::= 'invoke' OptionalCallingConv OptionalAttrs Type Value ParamList
//       OptionalAttrs 'to' TypeAndValue 'unwind' TypeAndValue

InvokeTerm
	: "invoke" OptCallingConv ReturnAttrs Type Value "(" Args ")" FuncAttrs OperandBundles "to" LabelType LocalIdent "unwind" LabelType LocalIdent OptCommaSepMetadataAttachmentList
	<< &ir.TermInvoke{CallingConv: $1.(ir.CallingConv), ReturnAttrs: $2.([]ir.ReturnAttribute), RetType: $3.(types.Type), Callee: $4.(value.Value), Args: $6.([]ir.Argument), FuncAttrs: $8.([]ir.FuncAttribute), OperandBundles: $9.([]*ir.OperandBundle), Normal: astx.Label($11, $12), Exception: astx.Label($14, $15), Metadata: $16.([]*metadata.MetadataAttachment)}, nil >>
;

// --- [ resume ] --------------------------------------------------------------

// https://llvm.org/docs/LangRef.html#resume-instruction

// ref: ParseResume
//
//   ::= 'resume' TypeAndValue

ResumeTerm
	: "resume" Type Value OptCommaSepMetadataAttachmentList
	<< &ir.TermResume{X: astx.TypeValue($1, $2), Metadata: $3.([]*metadata.MetadataAttachment)}, nil >>
;

// --- [ catchswitch ] ---------------------------------------------------------

// https://llvm.org/docs/LangRef.html#catchswitch-instruction

// ref: ParseCatchSwitch
//
//   ::= 'catchswitch' within Parent

CatchSwitchTerm
	: "catchswitch" "within" ExceptionScope "[" LabelList "]" "unwind" UnwindTarget OptCommaSepMetadataAttachmentList
	<< &ir.TermCatchSwitch{Scope: $2.(ir.ExceptionScope), Handlers: $4.([]*ir.BasicBlock), UnwindTarget: $7.(ir.UnwindTarget), Metadata: $8.([]*metadata.MetadataAttachment)}, nil >>
;

// --- [ catchret ] ------------------------------------------------------------

// https://llvm.org/docs/LangRef.html#catchret-instruction

// ref: ParseCatchRet
//
//   ::= 'catchret' from Parent Value 'to' TypeAndValue

CatchRetTerm
	: "catchret" "from" Value "to" LabelType LocalIdent OptCommaSepMetadataAttachmentList
	<< &ir.TermCatchRet{From: $2.(value.Value), To: astx.Label($4, $5), Metadata: $6.([]*metadata.MetadataAttachment)}, nil >>
;

// --- [ cleanupret ] ----------------------------------------------------------

// https://llvm.org/docs/LangRef.html#cleanupret-instruction

// ref: ParseCleanupRet
//
//   ::= 'cleanupret' from Value unwind ('to' 'caller' | TypeAndValue)

CleanupRetTerm
	: "cleanupret" "from" Value "unwind" UnwindTarget OptCommaSepMetadataAttachmentList
	<< &ir.TermCleanupRet{From: $2.(value.Value), UnwindTarget: $4.(ir.UnwindTarget), Metadata: $5.([]*metadata.MetadataAttachment)}, nil >>
;

// --- [ unreachable ] ---------------------------------------------------------

// https://llvm.org/docs/LangRef.html#unreachable-instruction

// ref: ParseInstruction

UnreachableTerm
	: "unreachable" OptCommaSepMetadataAttachmentList
	<< &ir.TermUnreachable{Metadata: $1.([]*metadata.MetadataAttachment)}, nil >>
;

// ___ [ Helpers ] _____________________________________________________________

UnwindTarget
	: "to" "caller"
	<< &ir.UnwindToCaller{}, nil >>
	| LabelType LocalIdent
	<< astx.Label($0, $1), nil >>
;
