// --- [ Conversion expressions ] ----------------------------------------------

// https://llvm.org/docs/LangRef.html#constant-expressions

// ~~~ [ trunc ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

TruncExpr
	: "trunc" "(" Type Constant "to" Type ")"
	<< &constant.TruncExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ zext ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

ZExtExpr
	: "zext" "(" Type Constant "to" Type ")"
	<< &constant.ZExtExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ sext ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

SExtExpr
	: "sext" "(" Type Constant "to" Type ")"
	<< &constant.SExtExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ fptrunc ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

FPTruncExpr
	: "fptrunc" "(" Type Constant "to" Type ")"
	<< &constant.FPTruncExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ fpext ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

FPExtExpr
	: "fpext" "(" Type Constant "to" Type ")"
	<< &constant.FPExtExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ fptoui ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

FPToUIExpr
	: "fptoui" "(" Type Constant "to" Type ")"
	<< &constant.FPToUIExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ fptosi ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

FPToSIExpr
	: "fptosi" "(" Type Constant "to" Type ")"
	<< &constant.FPToSIExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ uitofp ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

UIToFPExpr
	: "uitofp" "(" Type Constant "to" Type ")"
	<< &constant.UIToFPExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ sitofp ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

SIToFPExpr
	: "sitofp" "(" Type Constant "to" Type ")"
	<< &constant.SIToFPExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ ptrtoint ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

PtrToIntExpr
	: "ptrtoint" "(" Type Constant "to" Type ")"
	<< &constant.PtrToIntExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ inttoptr ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

IntToPtrExpr
	: "inttoptr" "(" Type Constant "to" Type ")"
	<< &constant.IntToPtrExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ bitcast ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

BitCastExpr
	: "bitcast" "(" Type Constant "to" Type ")"
	<< &constant.BitCastExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

// ~~~ [ addrspacecast ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

AddrSpaceCastExpr
	: "addrspacecast" "(" Type Constant "to" Type ")"
	<< &constant.AddrSpaceCastExpr{From: astx.TypeConst($2, $3), To: $5.(types.Type)}, nil >>
;

