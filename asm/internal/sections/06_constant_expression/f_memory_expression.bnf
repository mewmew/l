// --- [ Memory expressions ] --------------------------------------------------

// https://llvm.org/docs/LangRef.html#constant-expressions

// ~~~ [ getelementptr ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ref: ParseValID

GetElementPtrExpr
	: "getelementptr" OptInBounds "(" Type "," Type Constant "," GEPConstIndices ")"
	<< &constant.ExprGetElementPtr{InBounds: $1.(bool), ElemType: $3.(types.Type), Src: astx.TypeConst($5, $6), Indices: $8.([]*constant.Index)}, nil >>
;

// ref: ParseGlobalValueVector
//
//   ::= empty
//   ::= [inrange] TypeAndValue (',' [inrange] TypeAndValue)*

GEPConstIndices
	: empty
	<< ([]*constant.Index)(nil), nil >>
	| GEPConstIndexList
;

GEPConstIndexList
	: GEPConstIndex
	<< []*constant.Index{$0.(*constant.Index)}, nil >>
	| GEPConstIndexList "," GEPConstIndex
	<< append($0.([]*constant.Index), $2.(*constant.Index)), nil >>
;

GEPConstIndex
	: OptInrange Type Constant
	<< &constant.Index{InRange: $0.(bool), Index: astx.TypeConst($1, $2)}, nil >>
;

OptInrange
	: empty       << false, nil >>
	| "inrange"   << true, nil >>
;

