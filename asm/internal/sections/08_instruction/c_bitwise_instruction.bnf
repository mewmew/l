// --- [ Bitwise instructions ] ------------------------------------------------

// ~~~ [ shl ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#shl-instruction

// ref: ParseArithmetic
//
//  ::= ArithmeticOps TypeAndValue ',' Value

ShlInst
	: "shl" OverflowFlags Type Value "," Value OptCommaSepMetadataAttachmentList
	<< &ast.ShlInst{OverflowFlags: $1.([]ll.OverflowFlag), X: astx.TypeValue($2, $3), Y: astx.TypeValue($2, $5), Metadata: $6.([]*ast.MetadataAttachment)}, nil >>
;

// ~~~ [ lshr ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#lshr-instruction

// ref: ParseArithmetic
//
//  ::= ArithmeticOps TypeAndValue ',' Value

LShrInst
	: "lshr" OptExact Type Value "," Value OptCommaSepMetadataAttachmentList
	<< &ast.LShrInst{Exact: $1.(bool), X: astx.TypeValue($2, $3), Y: astx.TypeValue($2, $5), Metadata: $6.([]*ast.MetadataAttachment)}, nil >>
;

// ~~~ [ ashr ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#ashr-instruction

// ref: ParseArithmetic
//
//  ::= ArithmeticOps TypeAndValue ',' Value

AShrInst
	: "ashr" OptExact Type Value "," Value OptCommaSepMetadataAttachmentList
	<< &ast.AShrInst{Exact: $1.(bool), X: astx.TypeValue($2, $3), Y: astx.TypeValue($2, $5), Metadata: $6.([]*ast.MetadataAttachment)}, nil >>
;

// ~~~ [ and ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#and-instruction

// ref: ParseLogical
//
//  ::= ArithmeticOps TypeAndValue ',' Value {

AndInst
	: "and" Type Value "," Value OptCommaSepMetadataAttachmentList
	<< &ast.AndInst{X: astx.TypeValue($1, $2), Y: astx.TypeValue($1, $4), Metadata: $5.([]*ast.MetadataAttachment)}, nil >>
;

// ~~~ [ or ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#or-instruction

// ref: ParseLogical
//
//  ::= ArithmeticOps TypeAndValue ',' Value {

OrInst
	: "or" Type Value "," Value OptCommaSepMetadataAttachmentList
	<< &ast.OrInst{X: astx.TypeValue($1, $2), Y: astx.TypeValue($1, $4), Metadata: $5.([]*ast.MetadataAttachment)}, nil >>
;

// ~~~ [ xor ] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// https://llvm.org/docs/LangRef.html#xor-instruction

// ref: ParseLogical
//
//  ::= ArithmeticOps TypeAndValue ',' Value {

XorInst
	: "xor" Type Value "," Value OptCommaSepMetadataAttachmentList
	<< &ast.XorInst{X: astx.TypeValue($1, $2), Y: astx.TypeValue($1, $4), Metadata: $5.([]*ast.MetadataAttachment)}, nil >>
;

